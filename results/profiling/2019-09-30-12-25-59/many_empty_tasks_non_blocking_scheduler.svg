<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="694" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="677.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="677.00"> </text><g id="frames"><g><title>_process_events (asyncio/selector_events.py) (2 samples, 0.33%)</title><rect x="25" y="340" width="4" height="15" fill="rgb(214,194,29)"/><text x="28.00" y="350.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (4 samples, 0.66%)</title><rect x="41" y="388" width="7" height="15" fill="rgb(209,194,16)"/><text x="44.00" y="398.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (4 samples, 0.66%)</title><rect x="41" y="404" width="7" height="15" fill="rgb(220,30,26)"/><text x="44.00" y="414.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (3 samples, 0.50%)</title><rect x="58" y="484" width="6" height="15" fill="rgb(216,79,33)"/><text x="61.00" y="494.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (3 samples, 0.50%)</title><rect x="58" y="500" width="6" height="15" fill="rgb(231,142,12)"/><text x="61.00" y="510.50"></text></g><g><title>loads (simplejson/__init__.py) (1 samples, 0.17%)</title><rect x="62" y="516" width="2" height="15" fill="rgb(211,75,36)"/><text x="65.00" y="526.50"></text></g><g><title>decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="62" y="532" width="2" height="15" fill="rgb(233,210,7)"/><text x="65.00" y="542.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="62" y="548" width="2" height="15" fill="rgb(252,149,14)"/><text x="65.00" y="558.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="97" y="580" width="4" height="15" fill="rgb(244,114,37)"/><text x="100.00" y="590.50"></text></g><g><title>_to_decimal (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="99" y="596" width="2" height="15" fill="rgb(221,171,48)"/><text x="102.00" y="606.50"></text></g><g><title>deserialize (jupyter_client/session.py) (31 samples, 5.12%)</title><rect x="54" y="468" width="61" height="15" fill="rgb(221,151,40)"/><text x="57.00" y="478.50">deseri..</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (26 samples, 4.29%)</title><rect x="64" y="484" width="51" height="15" fill="rgb(214,209,4)"/><text x="67.00" y="494.50">extra..</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (26 samples, 4.29%)</title><rect x="64" y="500" width="51" height="15" fill="rgb(251,61,15)"/><text x="67.00" y="510.50">extra..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (26 samples, 4.29%)</title><rect x="64" y="516" width="51" height="15" fill="rgb(253,186,4)"/><text x="67.00" y="526.50">parse..</text></g><g><title>parse (dateutil/parser/_parser.py) (25 samples, 4.13%)</title><rect x="66" y="532" width="49" height="15" fill="rgb(243,61,8)"/><text x="69.00" y="542.50">pars..</text></g><g><title>parse (dateutil/parser/_parser.py) (25 samples, 4.13%)</title><rect x="66" y="548" width="49" height="15" fill="rgb(209,220,21)"/><text x="69.00" y="558.50">pars..</text></g><g><title>_parse (dateutil/parser/_parser.py) (9 samples, 1.49%)</title><rect x="97" y="564" width="18" height="15" fill="rgb(220,22,22)"/><text x="100.00" y="574.50"></text></g><g><title>split (dateutil/parser/_parser.py) (7 samples, 1.16%)</title><rect x="101" y="580" width="14" height="15" fill="rgb(208,227,27)"/><text x="104.00" y="590.50"></text></g><g><title>__next__ (dateutil/parser/_parser.py) (6 samples, 0.99%)</title><rect x="103" y="596" width="12" height="15" fill="rgb(251,147,32)"/><text x="106.00" y="606.50"></text></g><g><title>get_token (dateutil/parser/_parser.py) (4 samples, 0.66%)</title><rect x="107" y="612" width="8" height="15" fill="rgb(254,164,51)"/><text x="110.00" y="622.50"></text></g><g><title>isnum (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="113" y="628" width="2" height="15" fill="rgb(250,169,49)"/><text x="116.00" y="638.50"></text></g><g><title>handle_result (ipyparallel/controller/scheduler.py) (2 samples, 0.33%)</title><rect x="115" y="468" width="4" height="15" fill="rgb(236,130,18)"/><text x="118.00" y="478.50"></text></g><g><title>update_graph (ipyparallel/controller/scheduler.py) (2 samples, 0.33%)</title><rect x="115" y="484" width="4" height="15" fill="rgb(228,176,21)"/><text x="118.00" y="494.50"></text></g><g><title>&lt;listcomp&gt; (ipyparallel/controller/scheduler.py) (2 samples, 0.33%)</title><rect x="115" y="500" width="4" height="15" fill="rgb(226,102,4)"/><text x="118.00" y="510.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="117" y="516" width="2" height="15" fill="rgb(228,55,23)"/><text x="120.00" y="526.50"></text></g><g><title>dispatch_result (decorator.py:decorator-gen-153&gt;) (38 samples, 6.27%)</title><rect x="48" y="420" width="74" height="15" fill="rgb(237,34,46)"/><text x="51.00" y="430.50">dispatch..</text></g><g><title>log_errors (ipyparallel/util.py) (38 samples, 6.27%)</title><rect x="48" y="436" width="74" height="15" fill="rgb(218,208,21)"/><text x="51.00" y="446.50">log_erro..</text></g><g><title>dispatch_result (ipyparallel/controller/scheduler.py) (38 samples, 6.27%)</title><rect x="48" y="452" width="74" height="15" fill="rgb(223,214,5)"/><text x="51.00" y="462.50">dispatch..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="119" y="468" width="3" height="15" fill="rgb(213,228,45)"/><text x="122.00" y="478.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="122" y="484" width="2" height="15" fill="rgb(207,203,36)"/><text x="125.00" y="494.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (1 samples, 0.17%)</title><rect x="122" y="500" width="2" height="15" fill="rgb(249,169,41)"/><text x="125.00" y="510.50"></text></g><g><title>loads (simplejson/__init__.py) (1 samples, 0.17%)</title><rect x="122" y="516" width="2" height="15" fill="rgb(211,95,34)"/><text x="125.00" y="526.50"></text></g><g><title>decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="122" y="532" width="2" height="15" fill="rgb(232,72,52)"/><text x="125.00" y="542.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="122" y="548" width="2" height="15" fill="rgb(209,178,16)"/><text x="125.00" y="558.50"></text></g><g><title>_build_tzaware (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="150" y="564" width="2" height="15" fill="rgb(225,123,19)"/><text x="153.00" y="574.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="152" y="580" width="2" height="15" fill="rgb(229,33,35)"/><text x="155.00" y="590.50"></text></g><g><title>jump (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="152" y="596" width="2" height="15" fill="rgb(207,5,37)"/><text x="155.00" y="606.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (17 samples, 2.81%)</title><rect x="124" y="484" width="33" height="15" fill="rgb(205,94,13)"/><text x="127.00" y="494.50">ex..</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (17 samples, 2.81%)</title><rect x="124" y="500" width="33" height="15" fill="rgb(222,224,10)"/><text x="127.00" y="510.50">ex..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (17 samples, 2.81%)</title><rect x="124" y="516" width="33" height="15" fill="rgb(221,140,29)"/><text x="127.00" y="526.50">pa..</text></g><g><title>parse (dateutil/parser/_parser.py) (17 samples, 2.81%)</title><rect x="124" y="532" width="33" height="15" fill="rgb(206,40,42)"/><text x="127.00" y="542.50">pa..</text></g><g><title>parse (dateutil/parser/_parser.py) (17 samples, 2.81%)</title><rect x="124" y="548" width="33" height="15" fill="rgb(244,92,45)"/><text x="127.00" y="558.50">pa..</text></g><g><title>_parse (dateutil/parser/_parser.py) (3 samples, 0.50%)</title><rect x="152" y="564" width="5" height="15" fill="rgb(254,175,37)"/><text x="155.00" y="574.50"></text></g><g><title>split (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="154" y="580" width="3" height="15" fill="rgb(217,46,31)"/><text x="157.00" y="590.50"></text></g><g><title>__next__ (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="154" y="596" width="3" height="15" fill="rgb(221,168,12)"/><text x="157.00" y="606.50"></text></g><g><title>get_token (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="154" y="612" width="3" height="15" fill="rgb(223,221,25)"/><text x="157.00" y="622.50"></text></g><g><title>deserialize (jupyter_client/session.py) (19 samples, 3.14%)</title><rect x="122" y="468" width="37" height="15" fill="rgb(220,82,52)"/><text x="125.00" y="478.50">des..</text></g><g><title>sign (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="157" y="484" width="2" height="15" fill="rgb(243,117,35)"/><text x="160.00" y="494.50"></text></g><g><title>encode (ipython_genutils/py3compat.py) (1 samples, 0.17%)</title><rect x="157" y="500" width="2" height="15" fill="rgb(237,180,41)"/><text x="160.00" y="510.50"></text></g><g><title>available_engines (ipyparallel/controller/scheduler.py) (1 samples, 0.17%)</title><rect x="161" y="484" width="2" height="15" fill="rgb(243,36,40)"/><text x="164.00" y="494.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="161" y="500" width="2" height="15" fill="rgb(253,47,14)"/><text x="164.00" y="510.50"></text></g><g><title>can_run (ipyparallel/controller/scheduler.py) (5 samples, 0.83%)</title><rect x="163" y="484" width="10" height="15" fill="rgb(254,53,12)"/><text x="166.00" y="494.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (2 samples, 0.33%)</title><rect x="169" y="500" width="4" height="15" fill="rgb(229,104,41)"/><text x="172.00" y="510.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="171" y="516" width="2" height="15" fill="rgb(223,10,44)"/><text x="174.00" y="526.50"></text></g><g><title>debug (logging/__init__.py) (1 samples, 0.17%)</title><rect x="173" y="484" width="2" height="15" fill="rgb(216,205,47)"/><text x="176.00" y="494.50"></text></g><g><title>msg (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="181" y="516" width="4" height="15" fill="rgb(225,24,7)"/><text x="184.00" y="526.50"></text></g><g><title>msg_header (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="183" y="532" width="2" height="15" fill="rgb(212,38,13)"/><text x="186.00" y="542.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="185" y="516" width="2" height="15" fill="rgb(251,107,1)"/><text x="188.00" y="526.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="185" y="532" width="2" height="15" fill="rgb(237,141,31)"/><text x="188.00" y="542.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="185" y="548" width="2" height="15" fill="rgb(221,227,36)"/><text x="188.00" y="558.50"></text></g><g><title>__init__ (simplejson/encoder.py) (1 samples, 0.17%)</title><rect x="187" y="580" width="2" height="15" fill="rgb(242,188,36)"/><text x="190.00" y="590.50"></text></g><g><title>send (jupyter_client/session.py) (7 samples, 1.16%)</title><rect x="177" y="500" width="14" height="15" fill="rgb(211,83,41)"/><text x="180.00" y="510.50"></text></g><g><title>serialize (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="187" y="516" width="4" height="15" fill="rgb(221,182,5)"/><text x="190.00" y="526.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="187" y="532" width="4" height="15" fill="rgb(207,126,6)"/><text x="190.00" y="542.50"></text></g><g><title>dumps (zmq/utils/jsonapi.py) (2 samples, 0.33%)</title><rect x="187" y="548" width="4" height="15" fill="rgb(216,69,4)"/><text x="190.00" y="558.50"></text></g><g><title>dumps (simplejson/__init__.py) (2 samples, 0.33%)</title><rect x="187" y="564" width="4" height="15" fill="rgb(231,192,30)"/><text x="190.00" y="574.50"></text></g><g><title>encode (simplejson/encoder.py) (1 samples, 0.17%)</title><rect x="189" y="580" width="2" height="15" fill="rgb(240,175,32)"/><text x="192.00" y="590.50"></text></g><g><title>iterencode (simplejson/encoder.py) (1 samples, 0.17%)</title><rect x="189" y="596" width="2" height="15" fill="rgb(243,34,20)"/><text x="192.00" y="606.50"></text></g><g><title>encode_basestring (simplejson/encoder.py) (1 samples, 0.17%)</title><rect x="189" y="612" width="2" height="15" fill="rgb(222,200,24)"/><text x="192.00" y="622.50"></text></g><g><title>send (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="191" y="500" width="2" height="15" fill="rgb(215,23,50)"/><text x="194.00" y="510.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="191" y="516" width="2" height="15" fill="rgb(246,196,5)"/><text x="194.00" y="526.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="191" y="532" width="2" height="15" fill="rgb(250,150,38)"/><text x="194.00" y="542.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="191" y="548" width="2" height="15" fill="rgb(243,96,0)"/><text x="194.00" y="558.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="191" y="564" width="2" height="15" fill="rgb(244,87,30)"/><text x="194.00" y="574.50"></text></g><g><title>call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="191" y="580" width="2" height="15" fill="rgb(228,141,29)"/><text x="194.00" y="590.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="193" y="548" width="1" height="15" fill="rgb(241,144,40)"/><text x="196.00" y="558.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="193" y="564" width="1" height="15" fill="rgb(238,28,51)"/><text x="196.00" y="574.50"></text></g><g><title>maybe_run (ipyparallel/controller/scheduler.py) (19 samples, 3.14%)</title><rect x="159" y="468" width="37" height="15" fill="rgb(243,110,32)"/><text x="162.00" y="478.50">may..</text></g><g><title>submit_task (ipyparallel/controller/scheduler.py) (11 samples, 1.82%)</title><rect x="175" y="484" width="21" height="15" fill="rgb(207,33,53)"/><text x="178.00" y="494.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="193" y="500" width="3" height="15" fill="rgb(249,185,11)"/><text x="196.00" y="510.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="193" y="516" width="3" height="15" fill="rgb(252,88,7)"/><text x="196.00" y="526.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="193" y="532" width="3" height="15" fill="rgb(223,176,37)"/><text x="196.00" y="542.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="194" y="548" width="2" height="15" fill="rgb(212,12,20)"/><text x="197.00" y="558.50"></text></g><g><title>call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="194" y="564" width="2" height="15" fill="rgb(220,167,26)"/><text x="197.00" y="574.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="194" y="580" width="2" height="15" fill="rgb(223,61,28)"/><text x="197.00" y="590.50"></text></g><g><title>__init__ (asyncio/events.py) (1 samples, 0.17%)</title><rect x="194" y="596" width="2" height="15" fill="rgb(244,151,17)"/><text x="197.00" y="606.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="196" y="484" width="2" height="15" fill="rgb(251,11,43)"/><text x="199.00" y="494.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="196" y="500" width="2" height="15" fill="rgb(230,156,16)"/><text x="199.00" y="510.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="196" y="516" width="2" height="15" fill="rgb(245,113,23)"/><text x="199.00" y="526.50"></text></g><g><title>call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="196" y="532" width="2" height="15" fill="rgb(215,134,9)"/><text x="199.00" y="542.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="196" y="548" width="2" height="15" fill="rgb(241,112,20)"/><text x="199.00" y="558.50"></text></g><g><title>__init__ (asyncio/events.py) (1 samples, 0.17%)</title><rect x="196" y="564" width="2" height="15" fill="rgb(245,101,34)"/><text x="199.00" y="574.50"></text></g><g><title>_run_callback (zmq/eventloop/zmqstream.py) (79 samples, 13.04%)</title><rect x="48" y="404" width="154" height="15" fill="rgb(213,95,29)"/><text x="51.00" y="414.50">_run_callback (zmq/..</text></g><g><title>dispatch_submission (decorator.py:decorator-gen-152&gt;) (41 samples, 6.77%)</title><rect x="122" y="420" width="80" height="15" fill="rgb(216,44,48)"/><text x="125.00" y="430.50">dispatch_..</text></g><g><title>log_errors (ipyparallel/util.py) (41 samples, 6.77%)</title><rect x="122" y="436" width="80" height="15" fill="rgb(215,167,47)"/><text x="125.00" y="446.50">log_error..</text></g><g><title>dispatch_submission (ipyparallel/controller/scheduler.py) (41 samples, 6.77%)</title><rect x="122" y="452" width="80" height="15" fill="rgb(222,76,3)"/><text x="125.00" y="462.50">dispatch_..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="196" y="468" width="6" height="15" fill="rgb(210,5,44)"/><text x="199.00" y="478.50"></text></g><g><title>put (queue.py) (2 samples, 0.33%)</title><rect x="198" y="484" width="4" height="15" fill="rgb(229,205,27)"/><text x="201.00" y="494.50"></text></g><g><title>_handle_recv (zmq/eventloop/zmqstream.py) (81 samples, 13.37%)</title><rect x="48" y="388" width="158" height="15" fill="rgb(244,115,26)"/><text x="51.00" y="398.50">_handle_recv (zmq/ev..</text></g><g><title>recv_multipart (zmq/sugar/socket.py) (2 samples, 0.33%)</title><rect x="202" y="404" width="4" height="15" fill="rgb(243,55,10)"/><text x="205.00" y="414.50"></text></g><g><title>_handle_events (tornado/platform/asyncio.py) (89 samples, 14.69%)</title><rect x="35" y="356" width="173" height="15" fill="rgb(248,59,22)"/><text x="38.00" y="366.50">_handle_events (tornad..</text></g><g><title>_handle_events (zmq/eventloop/zmqstream.py) (89 samples, 14.69%)</title><rect x="35" y="372" width="173" height="15" fill="rgb(240,77,29)"/><text x="38.00" y="382.50">_handle_events (zmq/ev..</text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="206" y="388" width="2" height="15" fill="rgb(240,211,48)"/><text x="209.00" y="398.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="206" y="404" width="2" height="15" fill="rgb(206,166,25)"/><text x="209.00" y="414.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="206" y="420" width="2" height="15" fill="rgb(215,225,42)"/><text x="209.00" y="430.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="206" y="436" width="2" height="15" fill="rgb(238,32,29)"/><text x="209.00" y="446.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (16 samples, 2.64%)</title><rect x="224" y="404" width="31" height="15" fill="rgb(209,211,36)"/><text x="227.00" y="414.50">__..</text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (11 samples, 1.82%)</title><rect x="233" y="420" width="22" height="15" fill="rgb(228,76,45)"/><text x="236.00" y="430.50">_..</text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (5 samples, 0.83%)</title><rect x="270" y="500" width="10" height="15" fill="rgb(246,66,19)"/><text x="273.00" y="510.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (3 samples, 0.50%)</title><rect x="274" y="516" width="6" height="15" fill="rgb(234,37,46)"/><text x="277.00" y="526.50"></text></g><g><title>loads (simplejson/__init__.py) (1 samples, 0.17%)</title><rect x="278" y="532" width="2" height="15" fill="rgb(211,11,17)"/><text x="281.00" y="542.50"></text></g><g><title>decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="278" y="548" width="2" height="15" fill="rgb(243,209,36)"/><text x="281.00" y="558.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (1 samples, 0.17%)</title><rect x="278" y="564" width="2" height="15" fill="rgb(223,213,20)"/><text x="281.00" y="574.50"></text></g><g><title>&lt;listcomp&gt; (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="280" y="500" width="2" height="15" fill="rgb(213,41,54)"/><text x="283.00" y="510.50"></text></g><g><title>adapt (jupyter_client/adapter.py) (2 samples, 0.33%)</title><rect x="282" y="500" width="4" height="15" fill="rgb(235,203,6)"/><text x="285.00" y="510.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="284" y="516" width="2" height="15" fill="rgb(219,211,37)"/><text x="287.00" y="526.50"></text></g><g><title>__len__ (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="442" y="580" width="2" height="15" fill="rgb(249,50,51)"/><text x="445.00" y="590.50"></text></g><g><title>_build_naive (dateutil/parser/_parser.py) (3 samples, 0.50%)</title><rect x="444" y="580" width="6" height="15" fill="rgb(222,115,41)"/><text x="447.00" y="590.50"></text></g><g><title>_build_tzaware (dateutil/parser/_parser.py) (3 samples, 0.50%)</title><rect x="450" y="580" width="5" height="15" fill="rgb(233,8,38)"/><text x="453.00" y="590.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="471" y="596" width="2" height="15" fill="rgb(226,204,11)"/><text x="474.00" y="606.50"></text></g><g><title>_could_be_tzname (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="473" y="596" width="2" height="15" fill="rgb(215,204,45)"/><text x="476.00" y="606.50"></text></g><g><title>_find_hms_idx (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="483" y="612" width="4" height="15" fill="rgb(230,98,34)"/><text x="486.00" y="622.50"></text></g><g><title>hms (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="483" y="628" width="4" height="15" fill="rgb(253,224,24)"/><text x="486.00" y="638.50"></text></g><g><title>append (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="487" y="612" width="2" height="15" fill="rgb(220,60,38)"/><text x="490.00" y="622.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (8 samples, 1.32%)</title><rect x="475" y="596" width="15" height="15" fill="rgb(236,6,0)"/><text x="478.00" y="606.50"></text></g><g><title>month (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="489" y="612" width="1" height="15" fill="rgb(238,118,33)"/><text x="492.00" y="622.50"></text></g><g><title>ampm (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="490" y="596" width="2" height="15" fill="rgb(250,186,39)"/><text x="493.00" y="606.50"></text></g><g><title>resolve_ymd (dateutil/parser/_parser.py) (4 samples, 0.66%)</title><rect x="492" y="596" width="8" height="15" fill="rgb(210,83,41)"/><text x="495.00" y="606.50"></text></g><g><title>&lt;dictcomp&gt; (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="498" y="612" width="2" height="15" fill="rgb(225,146,32)"/><text x="501.00" y="622.50"></text></g><g><title>isnum (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="531" y="644" width="4" height="15" fill="rgb(222,98,31)"/><text x="534.00" y="654.50"></text></g><g><title>split (dateutil/parser/_parser.py) (19 samples, 3.14%)</title><rect x="500" y="596" width="37" height="15" fill="rgb(226,43,0)"/><text x="503.00" y="606.50">spl..</text></g><g><title>__next__ (dateutil/parser/_parser.py) (16 samples, 2.64%)</title><rect x="506" y="612" width="31" height="15" fill="rgb(226,184,51)"/><text x="509.00" y="622.50">__..</text></g><g><title>get_token (dateutil/parser/_parser.py) (16 samples, 2.64%)</title><rect x="506" y="628" width="31" height="15" fill="rgb(240,52,9)"/><text x="509.00" y="638.50">ge..</text></g><g><title>isword (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="535" y="644" width="2" height="15" fill="rgb(233,51,12)"/><text x="538.00" y="654.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (130 samples, 21.45%)</title><rect x="286" y="500" width="253" height="15" fill="rgb(251,204,47)"/><text x="289.00" y="510.50">extract_dates (jupyter_client/jso..</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (126 samples, 20.79%)</title><rect x="294" y="516" width="245" height="15" fill="rgb(215,11,5)"/><text x="297.00" y="526.50">extract_dates (jupyter_client/js..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (124 samples, 20.46%)</title><rect x="298" y="532" width="241" height="15" fill="rgb(248,77,45)"/><text x="301.00" y="542.50">parse_date (jupyter_client/jsonu..</text></g><g><title>parse (dateutil/parser/_parser.py) (120 samples, 19.80%)</title><rect x="305" y="548" width="234" height="15" fill="rgb(231,86,17)"/><text x="308.00" y="558.50">parse (dateutil/parser/_parser...</text></g><g><title>parse (dateutil/parser/_parser.py) (119 samples, 19.64%)</title><rect x="307" y="564" width="232" height="15" fill="rgb(253,9,9)"/><text x="310.00" y="574.50">parse (dateutil/parser/_parser..</text></g><g><title>_parse (dateutil/parser/_parser.py) (43 samples, 7.10%)</title><rect x="455" y="580" width="84" height="15" fill="rgb(240,152,24)"/><text x="458.00" y="590.50">_parse (d..</text></g><g><title>tzoffset (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="537" y="596" width="2" height="15" fill="rgb(214,70,46)"/><text x="540.00" y="606.50"></text></g><g><title>hexdigest (hmac.py) (3 samples, 0.50%)</title><rect x="539" y="516" width="6" height="15" fill="rgb(228,44,21)"/><text x="542.00" y="526.50"></text></g><g><title>_current (hmac.py) (2 samples, 0.33%)</title><rect x="541" y="532" width="4" height="15" fill="rgb(227,146,29)"/><text x="544.00" y="542.50"></text></g><g><title>deserialize (jupyter_client/session.py) (145 samples, 23.93%)</title><rect x="265" y="484" width="282" height="15" fill="rgb(248,167,49)"/><text x="268.00" y="494.50">deserialize (jupyter_client/session.p..</text></g><g><title>sign (jupyter_client/session.py) (4 samples, 0.66%)</title><rect x="539" y="500" width="8" height="15" fill="rgb(213,165,6)"/><text x="542.00" y="510.50"></text></g><g><title>update (hmac.py) (1 samples, 0.17%)</title><rect x="545" y="516" width="2" height="15" fill="rgb(243,11,7)"/><text x="548.00" y="526.50"></text></g><g><title>feed_identities (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="547" y="484" width="2" height="15" fill="rgb(224,7,53)"/><text x="550.00" y="494.50"></text></g><g><title>&lt;listcomp&gt; (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="547" y="500" width="2" height="15" fill="rgb(232,196,12)"/><text x="550.00" y="510.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="557" y="516" width="4" height="15" fill="rgb(253,14,51)"/><text x="560.00" y="526.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="557" y="532" width="4" height="15" fill="rgb(219,72,54)"/><text x="560.00" y="542.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="559" y="548" width="2" height="15" fill="rgb(211,136,17)"/><text x="562.00" y="558.50"></text></g><g><title>call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="559" y="564" width="2" height="15" fill="rgb(207,53,31)"/><text x="562.00" y="574.50"></text></g><g><title>__enter__ (threading.py) (1 samples, 0.17%)</title><rect x="561" y="532" width="2" height="15" fill="rgb(229,138,7)"/><text x="564.00" y="542.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (5 samples, 0.83%)</title><rect x="555" y="500" width="9" height="15" fill="rgb(210,129,3)"/><text x="558.00" y="510.50"></text></g><g><title>put (queue.py) (2 samples, 0.33%)</title><rect x="561" y="516" width="3" height="15" fill="rgb(246,174,32)"/><text x="564.00" y="526.50"></text></g><g><title>notify (threading.py) (1 samples, 0.17%)</title><rect x="563" y="532" width="1" height="15" fill="rgb(239,144,6)"/><text x="566.00" y="542.50"></text></g><g><title>&lt;listcomp&gt; (ipyparallel/controller/scheduler.py) (2 samples, 0.33%)</title><rect x="566" y="516" width="4" height="15" fill="rgb(229,227,11)"/><text x="569.00" y="526.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="568" y="532" width="2" height="15" fill="rgb(238,11,17)"/><text x="571.00" y="542.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="568" y="548" width="2" height="15" fill="rgb(235,47,28)"/><text x="571.00" y="558.50"></text></g><g><title>handle_result (ipyparallel/controller/scheduler.py) (12 samples, 1.98%)</title><rect x="549" y="484" width="23" height="15" fill="rgb(226,224,35)"/><text x="552.00" y="494.50">h..</text></g><g><title>update_graph (ipyparallel/controller/scheduler.py) (4 samples, 0.66%)</title><rect x="564" y="500" width="8" height="15" fill="rgb(245,226,23)"/><text x="567.00" y="510.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="570" y="516" width="2" height="15" fill="rgb(234,38,15)"/><text x="573.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="570" y="532" width="2" height="15" fill="rgb(253,71,34)"/><text x="573.00" y="542.50"></text></g><g><title>dispatch_result (decorator.py:decorator-gen-153&gt;) (161 samples, 26.57%)</title><rect x="263" y="436" width="313" height="15" fill="rgb(227,220,34)"/><text x="266.00" y="446.50">dispatch_result (decorator.py:decorator-ge..</text></g><g><title>log_errors (ipyparallel/util.py) (161 samples, 26.57%)</title><rect x="263" y="452" width="313" height="15" fill="rgb(239,50,9)"/><text x="266.00" y="462.50">log_errors (ipyparallel/util.py)</text></g><g><title>dispatch_result (ipyparallel/controller/scheduler.py) (161 samples, 26.57%)</title><rect x="263" y="468" width="313" height="15" fill="rgb(214,142,26)"/><text x="266.00" y="478.50">dispatch_result (ipyparallel/controller/sc..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="572" y="484" width="4" height="15" fill="rgb(221,222,15)"/><text x="575.00" y="494.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="572" y="500" width="4" height="15" fill="rgb(251,147,6)"/><text x="575.00" y="510.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="572" y="516" width="4" height="15" fill="rgb(214,54,46)"/><text x="575.00" y="526.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="574" y="532" width="2" height="15" fill="rgb(222,120,0)"/><text x="577.00" y="542.50"></text></g><g><title>call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="574" y="548" width="2" height="15" fill="rgb(246,104,5)"/><text x="577.00" y="558.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (1 samples, 0.17%)</title><rect x="574" y="564" width="2" height="15" fill="rgb(233,200,3)"/><text x="577.00" y="574.50"></text></g><g><title>__init__ (asyncio/events.py) (1 samples, 0.17%)</title><rect x="574" y="580" width="2" height="15" fill="rgb(215,13,34)"/><text x="577.00" y="590.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="578" y="484" width="2" height="15" fill="rgb(207,42,3)"/><text x="581.00" y="494.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (5 samples, 0.83%)</title><rect x="590" y="500" width="10" height="15" fill="rgb(214,206,54)"/><text x="593.00" y="510.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (5 samples, 0.83%)</title><rect x="590" y="516" width="10" height="15" fill="rgb(230,133,53)"/><text x="593.00" y="526.50"></text></g><g><title>loads (simplejson/__init__.py) (5 samples, 0.83%)</title><rect x="590" y="532" width="10" height="15" fill="rgb(242,114,16)"/><text x="593.00" y="542.50"></text></g><g><title>decode (simplejson/decoder.py) (3 samples, 0.50%)</title><rect x="594" y="548" width="6" height="15" fill="rgb(207,100,25)"/><text x="597.00" y="558.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (3 samples, 0.50%)</title><rect x="594" y="564" width="6" height="15" fill="rgb(230,214,1)"/><text x="597.00" y="574.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.50%)</title><rect x="600" y="500" width="5" height="15" fill="rgb(240,116,24)"/><text x="603.00" y="510.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="603" y="516" width="2" height="15" fill="rgb(235,117,2)"/><text x="606.00" y="526.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="605" y="516" width="2" height="15" fill="rgb(207,193,28)"/><text x="608.00" y="526.50"></text></g><g><title>adapt (jupyter_client/adapter.py) (2 samples, 0.33%)</title><rect x="605" y="500" width="4" height="15" fill="rgb(234,36,16)"/><text x="608.00" y="510.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="607" y="516" width="2" height="15" fill="rgb(243,37,32)"/><text x="610.00" y="526.50"></text></g><g><title>_build_naive (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="691" y="580" width="2" height="15" fill="rgb(244,20,46)"/><text x="694.00" y="590.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (3 samples, 0.50%)</title><rect x="697" y="596" width="6" height="15" fill="rgb(230,33,20)"/><text x="700.00" y="606.50"></text></g><g><title>_find_hms_idx (dateutil/parser/_parser.py) (3 samples, 0.50%)</title><rect x="712" y="612" width="6" height="15" fill="rgb(221,105,10)"/><text x="715.00" y="622.50"></text></g><g><title>hms (dateutil/parser/_parser.py) (2 samples, 0.33%)</title><rect x="714" y="628" width="4" height="15" fill="rgb(218,169,34)"/><text x="717.00" y="638.50"></text></g><g><title>_parsems (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="718" y="612" width="2" height="15" fill="rgb(211,176,23)"/><text x="721.00" y="622.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (10 samples, 1.65%)</title><rect x="703" y="596" width="19" height="15" fill="rgb(215,154,4)"/><text x="706.00" y="606.50"></text></g><g><title>jump (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="720" y="612" width="2" height="15" fill="rgb(219,163,52)"/><text x="723.00" y="622.50"></text></g><g><title>resolve_ymd (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="722" y="596" width="2" height="15" fill="rgb(246,6,10)"/><text x="725.00" y="606.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="724" y="612" width="2" height="15" fill="rgb(246,7,13)"/><text x="727.00" y="622.50"></text></g><g><title>split (dateutil/parser/_parser.py) (6 samples, 0.99%)</title><rect x="724" y="596" width="12" height="15" fill="rgb(237,34,2)"/><text x="727.00" y="606.50"></text></g><g><title>__next__ (dateutil/parser/_parser.py) (5 samples, 0.83%)</title><rect x="726" y="612" width="10" height="15" fill="rgb(240,116,19)"/><text x="729.00" y="622.50"></text></g><g><title>get_token (dateutil/parser/_parser.py) (5 samples, 0.83%)</title><rect x="726" y="628" width="10" height="15" fill="rgb(205,177,1)"/><text x="729.00" y="638.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (65 samples, 10.73%)</title><rect x="611" y="516" width="127" height="15" fill="rgb(245,54,52)"/><text x="614.00" y="526.50">extract_dates (..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (64 samples, 10.56%)</title><rect x="613" y="532" width="125" height="15" fill="rgb(243,89,48)"/><text x="616.00" y="542.50">parse_date (jup..</text></g><g><title>parse (dateutil/parser/_parser.py) (63 samples, 10.40%)</title><rect x="615" y="548" width="123" height="15" fill="rgb(227,193,33)"/><text x="618.00" y="558.50">parse (dateutil..</text></g><g><title>parse (dateutil/parser/_parser.py) (63 samples, 10.40%)</title><rect x="615" y="564" width="123" height="15" fill="rgb(254,222,46)"/><text x="618.00" y="574.50">parse (dateutil..</text></g><g><title>_parse (dateutil/parser/_parser.py) (23 samples, 3.80%)</title><rect x="693" y="580" width="45" height="15" fill="rgb(239,153,23)"/><text x="696.00" y="590.50">_par..</text></g><g><title>validate (dateutil/parser/_parser.py) (1 samples, 0.17%)</title><rect x="736" y="596" width="2" height="15" fill="rgb(219,74,10)"/><text x="739.00" y="606.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (67 samples, 11.06%)</title><rect x="609" y="500" width="131" height="15" fill="rgb(219,208,50)"/><text x="612.00" y="510.50">extract_dates (j..</text></g><g><title>iteritems (ipython_genutils/py3compat.py) (1 samples, 0.17%)</title><rect x="738" y="516" width="2" height="15" fill="rgb(251,45,38)"/><text x="741.00" y="526.50"></text></g><g><title>deserialize (jupyter_client/session.py) (84 samples, 13.86%)</title><rect x="580" y="484" width="164" height="15" fill="rgb(225,193,10)"/><text x="583.00" y="494.50">deserialize (jupyter_..</text></g><g><title>sign (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="740" y="500" width="4" height="15" fill="rgb(207,194,33)"/><text x="743.00" y="510.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="742" y="516" width="2" height="15" fill="rgb(251,100,4)"/><text x="745.00" y="526.50"></text></g><g><title>feed_identities (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="744" y="484" width="3" height="15" fill="rgb(242,54,21)"/><text x="747.00" y="494.50"></text></g><g><title>&lt;listcomp&gt; (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="746" y="500" width="1" height="15" fill="rgb(211,156,28)"/><text x="749.00" y="510.50"></text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="749" y="500" width="6" height="15" fill="rgb(233,76,29)"/><text x="752.00" y="510.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="749" y="516" width="6" height="15" fill="rgb(254,215,36)"/><text x="752.00" y="526.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="753" y="532" width="2" height="15" fill="rgb(250,64,21)"/><text x="756.00" y="542.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (1 samples, 0.17%)</title><rect x="753" y="548" width="2" height="15" fill="rgb(214,50,1)"/><text x="756.00" y="558.50"></text></g><g><title>flush (zmq/eventloop/zmqstream.py) (5 samples, 0.83%)</title><rect x="747" y="484" width="10" height="15" fill="rgb(222,148,22)"/><text x="750.00" y="494.50"></text></g><g><title>update_flag (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="755" y="500" width="2" height="15" fill="rgb(221,73,13)"/><text x="758.00" y="510.50"></text></g><g><title>sending (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="755" y="516" width="2" height="15" fill="rgb(229,208,23)"/><text x="758.00" y="526.50"></text></g><g><title>empty (queue.py) (1 samples, 0.17%)</title><rect x="755" y="532" width="2" height="15" fill="rgb(235,203,0)"/><text x="758.00" y="542.50"></text></g><g><title>available_engines (ipyparallel/controller/scheduler.py) (5 samples, 0.83%)</title><rect x="759" y="500" width="10" height="15" fill="rgb(238,221,3)"/><text x="762.00" y="510.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.50%)</title><rect x="763" y="516" width="6" height="15" fill="rgb(250,218,38)"/><text x="766.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (2 samples, 0.33%)</title><rect x="765" y="532" width="4" height="15" fill="rgb(236,204,27)"/><text x="768.00" y="542.50"></text></g><g><title>can_run (ipyparallel/controller/scheduler.py) (13 samples, 2.15%)</title><rect x="769" y="500" width="25" height="15" fill="rgb(213,102,4)"/><text x="772.00" y="510.50">c..</text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.50%)</title><rect x="788" y="516" width="6" height="15" fill="rgb(212,188,51)"/><text x="791.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (2 samples, 0.33%)</title><rect x="790" y="532" width="4" height="15" fill="rgb(233,119,17)"/><text x="793.00" y="542.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="798" y="516" width="2" height="15" fill="rgb(217,61,48)"/><text x="801.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="798" y="532" width="2" height="15" fill="rgb(217,193,6)"/><text x="801.00" y="542.50"></text></g><g><title>add_job (ipyparallel/controller/scheduler.py) (1 samples, 0.17%)</title><rect x="800" y="516" width="2" height="15" fill="rgb(230,9,41)"/><text x="803.00" y="526.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="800" y="532" width="2" height="15" fill="rgb(233,182,1)"/><text x="803.00" y="542.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (2 samples, 0.33%)</title><rect x="804" y="532" width="4" height="15" fill="rgb(224,42,28)"/><text x="807.00" y="542.50"></text></g><g><title>get (traitlets/traitlets.py) (1 samples, 0.17%)</title><rect x="806" y="548" width="2" height="15" fill="rgb(209,206,25)"/><text x="809.00" y="558.50"></text></g><g><title>msg_header (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="808" y="564" width="2" height="15" fill="rgb(217,122,30)"/><text x="811.00" y="574.50"></text></g><g><title>utcnow (jupyter_client/session.py) (1 samples, 0.17%)</title><rect x="808" y="580" width="2" height="15" fill="rgb(227,164,32)"/><text x="811.00" y="590.50"></text></g><g><title>msg (jupyter_client/session.py) (3 samples, 0.50%)</title><rect x="808" y="532" width="6" height="15" fill="rgb(223,188,46)"/><text x="811.00" y="542.50"></text></g><g><title>msg_header (jupyter_client/session.py) (3 samples, 0.50%)</title><rect x="808" y="548" width="6" height="15" fill="rgb(243,53,26)"/><text x="811.00" y="558.50"></text></g><g><title>msg_id (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="810" y="564" width="4" height="15" fill="rgb(233,81,14)"/><text x="813.00" y="574.50"></text></g><g><title>new_id (jupyter_client/session.py) (2 samples, 0.33%)</title><rect x="810" y="580" width="4" height="15" fill="rgb(217,85,44)"/><text x="813.00" y="590.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="814" y="548" width="4" height="15" fill="rgb(213,6,11)"/><text x="817.00" y="558.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (2 samples, 0.33%)</title><rect x="814" y="564" width="4" height="15" fill="rgb(249,20,16)"/><text x="817.00" y="574.50"></text></g><g><title>on_send (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="818" y="548" width="2" height="15" fill="rgb(218,44,46)"/><text x="821.00" y="558.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (7 samples, 1.16%)</title><rect x="814" y="532" width="13" height="15" fill="rgb(234,149,35)"/><text x="817.00" y="542.50"></text></g><g><title>put (queue.py) (4 samples, 0.66%)</title><rect x="820" y="548" width="7" height="15" fill="rgb(254,41,41)"/><text x="823.00" y="558.50"></text></g><g><title>notify (threading.py) (3 samples, 0.50%)</title><rect x="821" y="564" width="6" height="15" fill="rgb(250,161,6)"/><text x="824.00" y="574.50"></text></g><g><title>__init__ (simplejson/encoder.py) (1 samples, 0.17%)</title><rect x="833" y="596" width="2" height="15" fill="rgb(237,82,19)"/><text x="836.00" y="606.50"></text></g><g><title>date_default (jupyter_client/jsonutil.py) (3 samples, 0.50%)</title><rect x="851" y="628" width="6" height="15" fill="rgb(213,9,35)"/><text x="854.00" y="638.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (19 samples, 3.14%)</title><rect x="827" y="548" width="37" height="15" fill="rgb(222,41,48)"/><text x="830.00" y="558.50">&lt;la..</text></g><g><title>dumps (zmq/utils/jsonapi.py) (19 samples, 3.14%)</title><rect x="827" y="564" width="37" height="15" fill="rgb(214,8,39)"/><text x="830.00" y="574.50">dum..</text></g><g><title>dumps (simplejson/__init__.py) (18 samples, 2.97%)</title><rect x="829" y="580" width="35" height="15" fill="rgb(235,42,13)"/><text x="832.00" y="590.50">du..</text></g><g><title>encode (simplejson/encoder.py) (15 samples, 2.48%)</title><rect x="835" y="596" width="29" height="15" fill="rgb(234,79,44)"/><text x="838.00" y="606.50">en..</text></g><g><title>iterencode (simplejson/encoder.py) (13 samples, 2.15%)</title><rect x="839" y="612" width="25" height="15" fill="rgb(225,112,40)"/><text x="842.00" y="622.50">i..</text></g><g><title>encode_basestring (simplejson/encoder.py) (4 samples, 0.66%)</title><rect x="857" y="628" width="7" height="15" fill="rgb(215,215,53)"/><text x="860.00" y="638.50"></text></g><g><title>copy (hmac.py) (1 samples, 0.17%)</title><rect x="868" y="564" width="2" height="15" fill="rgb(238,28,33)"/><text x="871.00" y="574.50"></text></g><g><title>send (jupyter_client/session.py) (36 samples, 5.94%)</title><rect x="802" y="516" width="70" height="15" fill="rgb(205,57,6)"/><text x="805.00" y="526.50">send (j..</text></g><g><title>serialize (jupyter_client/session.py) (23 samples, 3.80%)</title><rect x="827" y="532" width="45" height="15" fill="rgb(217,212,11)"/><text x="830.00" y="542.50">seri..</text></g><g><title>sign (jupyter_client/session.py) (4 samples, 0.66%)</title><rect x="864" y="548" width="8" height="15" fill="rgb(235,199,18)"/><text x="867.00" y="558.50"></text></g><g><title>update (hmac.py) (1 samples, 0.17%)</title><rect x="870" y="564" width="2" height="15" fill="rgb(213,46,26)"/><text x="873.00" y="574.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="876" y="548" width="6" height="15" fill="rgb(218,189,40)"/><text x="879.00" y="558.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="876" y="564" width="6" height="15" fill="rgb(243,34,11)"/><text x="879.00" y="574.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (2 samples, 0.33%)</title><rect x="878" y="580" width="4" height="15" fill="rgb(211,35,4)"/><text x="881.00" y="590.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (2 samples, 0.33%)</title><rect x="878" y="596" width="4" height="15" fill="rgb(231,18,6)"/><text x="881.00" y="606.50"></text></g><g><title>send (zmq/eventloop/zmqstream.py) (6 samples, 0.99%)</title><rect x="872" y="516" width="12" height="15" fill="rgb(229,226,16)"/><text x="875.00" y="526.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (6 samples, 0.99%)</title><rect x="872" y="532" width="12" height="15" fill="rgb(250,5,9)"/><text x="875.00" y="542.50"></text></g><g><title>put (queue.py) (1 samples, 0.17%)</title><rect x="882" y="548" width="2" height="15" fill="rgb(217,41,7)"/><text x="885.00" y="558.50"></text></g><g><title>maybe_run (ipyparallel/controller/scheduler.py) (68 samples, 11.22%)</title><rect x="757" y="484" width="133" height="15" fill="rgb(231,168,23)"/><text x="760.00" y="494.50">maybe_run (ipypa..</text></g><g><title>submit_task (ipyparallel/controller/scheduler.py) (49 samples, 8.09%)</title><rect x="794" y="500" width="96" height="15" fill="rgb(222,172,7)"/><text x="797.00" y="510.50">submit_task..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="884" y="516" width="6" height="15" fill="rgb(222,138,31)"/><text x="887.00" y="526.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="884" y="532" width="6" height="15" fill="rgb(240,93,45)"/><text x="887.00" y="542.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="884" y="548" width="6" height="15" fill="rgb(244,121,9)"/><text x="887.00" y="558.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (2 samples, 0.33%)</title><rect x="886" y="564" width="4" height="15" fill="rgb(219,203,48)"/><text x="889.00" y="574.50"></text></g><g><title>call_soon (asyncio/base_events.py) (2 samples, 0.33%)</title><rect x="886" y="580" width="4" height="15" fill="rgb(227,120,41)"/><text x="889.00" y="590.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (2 samples, 0.33%)</title><rect x="886" y="596" width="4" height="15" fill="rgb(239,162,47)"/><text x="889.00" y="606.50"></text></g><g><title>__init__ (asyncio/events.py) (1 samples, 0.17%)</title><rect x="888" y="612" width="2" height="15" fill="rgb(218,86,44)"/><text x="891.00" y="622.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (2 samples, 0.33%)</title><rect x="890" y="532" width="4" height="15" fill="rgb(233,186,9)"/><text x="893.00" y="542.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (2 samples, 0.33%)</title><rect x="890" y="548" width="4" height="15" fill="rgb(254,225,37)"/><text x="893.00" y="558.50"></text></g><g><title>_run_callback (zmq/eventloop/zmqstream.py) (326 samples, 53.80%)</title><rect x="261" y="420" width="634" height="15" fill="rgb(212,190,22)"/><text x="264.00" y="430.50">_run_callback (zmq/eventloop/zmqstream.py)</text></g><g><title>dispatch_submission (decorator.py:decorator-gen-152&gt;) (164 samples, 27.06%)</title><rect x="576" y="436" width="319" height="15" fill="rgb(234,189,40)"/><text x="579.00" y="446.50">dispatch_submission (decorator.py:decorator..</text></g><g><title>log_errors (ipyparallel/util.py) (164 samples, 27.06%)</title><rect x="576" y="452" width="319" height="15" fill="rgb(218,4,38)"/><text x="579.00" y="462.50">log_errors (ipyparallel/util.py)</text></g><g><title>dispatch_submission (ipyparallel/controller/scheduler.py) (164 samples, 27.06%)</title><rect x="576" y="468" width="319" height="15" fill="rgb(243,60,43)"/><text x="579.00" y="478.50">dispatch_submission (ipyparallel/controller..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="890" y="484" width="5" height="15" fill="rgb(247,217,12)"/><text x="893.00" y="494.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="890" y="500" width="5" height="15" fill="rgb(212,47,48)"/><text x="893.00" y="510.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="890" y="516" width="5" height="15" fill="rgb(236,46,7)"/><text x="893.00" y="526.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (1 samples, 0.17%)</title><rect x="894" y="532" width="1" height="15" fill="rgb(244,0,33)"/><text x="897.00" y="542.50"></text></g><g><title>_handle_recv (zmq/eventloop/zmqstream.py) (350 samples, 57.76%)</title><rect x="255" y="404" width="681" height="15" fill="rgb(226,216,31)"/><text x="258.00" y="414.50">_handle_recv (zmq/eventloop/zmqstream.py)</text></g><g><title>recv_multipart (zmq/sugar/socket.py) (21 samples, 3.47%)</title><rect x="895" y="420" width="41" height="15" fill="rgb(217,173,32)"/><text x="898.00" y="430.50">rec..</text></g><g><title>_run_callback (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="944" y="420" width="2" height="15" fill="rgb(215,117,50)"/><text x="947.00" y="430.50"></text></g><g><title>get (queue.py) (8 samples, 1.32%)</title><rect x="946" y="420" width="16" height="15" fill="rgb(235,177,52)"/><text x="949.00" y="430.50"></text></g><g><title>notify (threading.py) (3 samples, 0.50%)</title><rect x="956" y="436" width="6" height="15" fill="rgb(232,227,46)"/><text x="959.00" y="446.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.17%)</title><rect x="960" y="452" width="2" height="15" fill="rgb(239,208,40)"/><text x="963.00" y="462.50"></text></g><g><title>send_multipart (zmq/sugar/socket.py) (67 samples, 11.06%)</title><rect x="962" y="420" width="130" height="15" fill="rgb(207,105,41)"/><text x="965.00" y="430.50">send_multipart (..</text></g><g><title>send (zmq/sugar/socket.py) (45 samples, 7.43%)</title><rect x="1005" y="436" width="87" height="15" fill="rgb(224,30,10)"/><text x="1008.00" y="446.50">send (zmq/..</text></g><g><title>_handle_send (zmq/eventloop/zmqstream.py) (83 samples, 13.70%)</title><rect x="936" y="404" width="162" height="15" fill="rgb(217,143,47)"/><text x="939.00" y="414.50">_handle_send (zmq/ev..</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (3 samples, 0.50%)</title><rect x="1092" y="420" width="6" height="15" fill="rgb(213,119,11)"/><text x="1095.00" y="430.50"></text></g><g><title>empty (queue.py) (3 samples, 0.50%)</title><rect x="1092" y="436" width="6" height="15" fill="rgb(222,205,28)"/><text x="1095.00" y="446.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (17 samples, 2.81%)</title><rect x="1127" y="436" width="33" height="15" fill="rgb(230,47,33)"/><text x="1130.00" y="446.50">__..</text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (12 samples, 1.98%)</title><rect x="1137" y="452" width="23" height="15" fill="rgb(206,98,53)"/><text x="1140.00" y="462.50">_..</text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (35 samples, 5.78%)</title><rect x="1108" y="420" width="68" height="15" fill="rgb(233,98,3)"/><text x="1111.00" y="430.50">_update..</text></g><g><title>add_callback (tornado/platform/asyncio.py) (8 samples, 1.32%)</title><rect x="1160" y="436" width="16" height="15" fill="rgb(250,135,8)"/><text x="1163.00" y="446.50"></text></g><g><title>call_soon (asyncio/base_events.py) (7 samples, 1.16%)</title><rect x="1162" y="452" width="14" height="15" fill="rgb(206,214,7)"/><text x="1165.00" y="462.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (6 samples, 0.99%)</title><rect x="1164" y="468" width="12" height="15" fill="rgb(207,92,3)"/><text x="1167.00" y="478.50"></text></g><g><title>__init__ (asyncio/events.py) (5 samples, 0.83%)</title><rect x="1166" y="484" width="10" height="15" fill="rgb(206,95,21)"/><text x="1169.00" y="494.50"></text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (46 samples, 7.59%)</title><rect x="1098" y="404" width="90" height="15" fill="rgb(243,139,28)"/><text x="1101.00" y="414.50">_rebuild_i..</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (6 samples, 0.99%)</title><rect x="1176" y="420" width="12" height="15" fill="rgb(228,113,22)"/><text x="1179.00" y="430.50"></text></g><g><title>empty (queue.py) (3 samples, 0.50%)</title><rect x="1182" y="436" width="6" height="15" fill="rgb(220,51,19)"/><text x="1185.00" y="446.50"></text></g><g><title>all (606 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(211,116,9)"/><text x="13.00" y="46.50"></text></g><g><title>_run_module_as_main (runpy.py) (606 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(247,35,44)"/><text x="13.00" y="62.50">_run_module_as_main (runpy.py)</text></g><g><title>_run_code (runpy.py) (606 samples, 100.00%)</title><rect x="10" y="68" width="1180" height="15" fill="rgb(227,121,48)"/><text x="13.00" y="78.50">_run_code (runpy.py)</text></g><g><title>&lt;module&gt; (ipyparallel/controller/__main__.py) (606 samples, 100.00%)</title><rect x="10" y="84" width="1180" height="15" fill="rgb(222,197,50)"/><text x="13.00" y="94.50">&lt;module&gt; (ipyparallel/controller/__main__.py)</text></g><g><title>main (ipyparallel/controller/__main__.py) (606 samples, 100.00%)</title><rect x="10" y="100" width="1180" height="15" fill="rgb(207,111,6)"/><text x="13.00" y="110.50">main (ipyparallel/controller/__main__.py)</text></g><g><title>launch_new_instance (ipyparallel/apps/ipcontrollerapp.py) (606 samples, 100.00%)</title><rect x="10" y="116" width="1180" height="15" fill="rgb(207,130,34)"/><text x="13.00" y="126.50">launch_new_instance (ipyparallel/apps/ipcontrollerapp.py)</text></g><g><title>launch_instance (traitlets/config/application.py) (606 samples, 100.00%)</title><rect x="10" y="132" width="1180" height="15" fill="rgb(232,136,24)"/><text x="13.00" y="142.50">launch_instance (traitlets/config/application.py)</text></g><g><title>start (ipyparallel/apps/ipcontrollerapp.py) (606 samples, 100.00%)</title><rect x="10" y="148" width="1180" height="15" fill="rgb(227,9,39)"/><text x="13.00" y="158.50">start (ipyparallel/apps/ipcontrollerapp.py)</text></g><g><title>start (multiprocessing/process.py) (606 samples, 100.00%)</title><rect x="10" y="164" width="1180" height="15" fill="rgb(225,167,32)"/><text x="13.00" y="174.50">start (multiprocessing/process.py)</text></g><g><title>_Popen (multiprocessing/context.py) (606 samples, 100.00%)</title><rect x="10" y="180" width="1180" height="15" fill="rgb(246,190,38)"/><text x="13.00" y="190.50">_Popen (multiprocessing/context.py)</text></g><g><title>_Popen (multiprocessing/context.py) (606 samples, 100.00%)</title><rect x="10" y="196" width="1180" height="15" fill="rgb(208,74,41)"/><text x="13.00" y="206.50">_Popen (multiprocessing/context.py)</text></g><g><title>__init__ (multiprocessing/popen_fork.py) (606 samples, 100.00%)</title><rect x="10" y="212" width="1180" height="15" fill="rgb(248,3,34)"/><text x="13.00" y="222.50">__init__ (multiprocessing/popen_fork.py)</text></g><g><title>_launch (multiprocessing/popen_fork.py) (606 samples, 100.00%)</title><rect x="10" y="228" width="1180" height="15" fill="rgb(243,204,1)"/><text x="13.00" y="238.50">_launch (multiprocessing/popen_fork.py)</text></g><g><title>_bootstrap (multiprocessing/process.py) (606 samples, 100.00%)</title><rect x="10" y="244" width="1180" height="15" fill="rgb(219,98,5)"/><text x="13.00" y="254.50">_bootstrap (multiprocessing/process.py)</text></g><g><title>run (multiprocessing/process.py) (606 samples, 100.00%)</title><rect x="10" y="260" width="1180" height="15" fill="rgb(246,55,42)"/><text x="13.00" y="270.50">run (multiprocessing/process.py)</text></g><g><title>launch_scheduler (ipyparallel/controller/scheduler.py) (606 samples, 100.00%)</title><rect x="10" y="276" width="1180" height="15" fill="rgb(227,13,21)"/><text x="13.00" y="286.50">launch_scheduler (ipyparallel/controller/scheduler.py)</text></g><g><title>start (tornado/platform/asyncio.py) (606 samples, 100.00%)</title><rect x="10" y="292" width="1180" height="15" fill="rgb(209,180,53)"/><text x="13.00" y="302.50">start (tornado/platform/asyncio.py)</text></g><g><title>run_forever (asyncio/base_events.py) (606 samples, 100.00%)</title><rect x="10" y="308" width="1180" height="15" fill="rgb(234,229,38)"/><text x="13.00" y="318.50">run_forever (asyncio/base_events.py)</text></g><g><title>_run_once (asyncio/base_events.py) (606 samples, 100.00%)</title><rect x="10" y="324" width="1180" height="15" fill="rgb(246,151,46)"/><text x="13.00" y="334.50">_run_once (asyncio/base_events.py)</text></g><g><title>_run (asyncio/events.py) (596 samples, 98.35%)</title><rect x="29" y="340" width="1161" height="15" fill="rgb(243,208,43)"/><text x="32.00" y="350.50">_run (asyncio/events.py)</text></g><g><title>_run_callback (tornado/ioloop.py) (504 samples, 83.17%)</title><rect x="208" y="356" width="982" height="15" fill="rgb(231,228,29)"/><text x="211.00" y="366.50">_run_callback (tornado/ioloop.py)</text></g><g><title>&lt;lambda&gt; (zmq/eventloop/zmqstream.py) (504 samples, 83.17%)</title><rect x="208" y="372" width="982" height="15" fill="rgb(236,86,34)"/><text x="211.00" y="382.50">&lt;lambda&gt; (zmq/eventloop/zmqstream.py)</text></g><g><title>_handle_events (zmq/eventloop/zmqstream.py) (504 samples, 83.17%)</title><rect x="208" y="388" width="982" height="15" fill="rgb(252,186,24)"/><text x="211.00" y="398.50">_handle_events (zmq/eventloop/zmqstream.py)</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (1 samples, 0.17%)</title><rect x="1188" y="404" width="2" height="15" fill="rgb(215,13,34)"/><text x="1191.00" y="414.50"></text></g><g><title>empty (queue.py) (1 samples, 0.17%)</title><rect x="1188" y="420" width="2" height="15" fill="rgb(206,196,30)"/><text x="1191.00" y="430.50"></text></g></g></svg>