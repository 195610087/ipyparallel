<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="694" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="677.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="677.00"> </text><g id="frames"><g><title>extract_dates (jupyter_client/jsonutil.py) (35 samples, 1.39%)</title><rect x="31" y="484" width="17" height="15" fill="rgb(210,54,42)"/><text x="34.00" y="494.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (34 samples, 1.35%)</title><rect x="32" y="500" width="16" height="15" fill="rgb(225,136,51)"/><text x="35.00" y="510.50"></text></g><g><title>parse_date (jupyter_client/jsonutil.py) (34 samples, 1.35%)</title><rect x="32" y="516" width="16" height="15" fill="rgb(253,143,5)"/><text x="35.00" y="526.50"></text></g><g><title>parse (dateutil/parser/_parser.py) (33 samples, 1.31%)</title><rect x="32" y="532" width="16" height="15" fill="rgb(222,125,23)"/><text x="35.00" y="542.50"></text></g><g><title>parse (dateutil/parser/_parser.py) (32 samples, 1.27%)</title><rect x="32" y="548" width="16" height="15" fill="rgb(227,92,19)"/><text x="35.00" y="558.50"></text></g><g><title>_parse (dateutil/parser/_parser.py) (12 samples, 0.48%)</title><rect x="42" y="564" width="6" height="15" fill="rgb(221,204,21)"/><text x="45.00" y="574.50"></text></g><g><title>split (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="46" y="580" width="2" height="15" fill="rgb(228,151,14)"/><text x="49.00" y="590.50"></text></g><g><title>__next__ (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="46" y="596" width="2" height="15" fill="rgb(220,170,17)"/><text x="49.00" y="606.50"></text></g><g><title>get_token (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="46" y="612" width="2" height="15" fill="rgb(229,99,41)"/><text x="49.00" y="622.50"></text></g><g><title>dispatch_result (decorator.py:decorator-gen-153&gt;) (40 samples, 1.59%)</title><rect x="29" y="420" width="19" height="15" fill="rgb(207,216,41)"/><text x="32.00" y="430.50"></text></g><g><title>log_errors (ipyparallel/util.py) (40 samples, 1.59%)</title><rect x="29" y="436" width="19" height="15" fill="rgb(247,82,43)"/><text x="32.00" y="446.50"></text></g><g><title>dispatch_result (ipyparallel/controller/scheduler.py) (40 samples, 1.59%)</title><rect x="29" y="452" width="19" height="15" fill="rgb(238,29,2)"/><text x="32.00" y="462.50"></text></g><g><title>deserialize (jupyter_client/session.py) (37 samples, 1.47%)</title><rect x="31" y="468" width="17" height="15" fill="rgb(242,10,17)"/><text x="34.00" y="478.50"></text></g><g><title>deserialize (jupyter_client/session.py) (12 samples, 0.48%)</title><rect x="48" y="468" width="6" height="15" fill="rgb(220,133,32)"/><text x="51.00" y="478.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (10 samples, 0.40%)</title><rect x="49" y="484" width="5" height="15" fill="rgb(254,127,11)"/><text x="52.00" y="494.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (10 samples, 0.40%)</title><rect x="49" y="500" width="5" height="15" fill="rgb(248,130,34)"/><text x="52.00" y="510.50"></text></g><g><title>parse_date (jupyter_client/jsonutil.py) (10 samples, 0.40%)</title><rect x="49" y="516" width="5" height="15" fill="rgb(249,200,42)"/><text x="52.00" y="526.50"></text></g><g><title>parse (dateutil/parser/_parser.py) (10 samples, 0.40%)</title><rect x="49" y="532" width="5" height="15" fill="rgb(214,202,53)"/><text x="52.00" y="542.50"></text></g><g><title>parse (dateutil/parser/_parser.py) (10 samples, 0.40%)</title><rect x="49" y="548" width="5" height="15" fill="rgb(223,61,50)"/><text x="52.00" y="558.50"></text></g><g><title>_parse (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="52" y="564" width="2" height="15" fill="rgb(229,197,48)"/><text x="55.00" y="574.50"></text></g><g><title>send (jupyter_client/session.py) (4 samples, 0.16%)</title><rect x="56" y="500" width="2" height="15" fill="rgb(215,31,48)"/><text x="59.00" y="510.50"></text></g><g><title>serialize (jupyter_client/session.py) (3 samples, 0.12%)</title><rect x="56" y="516" width="2" height="15" fill="rgb(229,46,31)"/><text x="59.00" y="526.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (3 samples, 0.12%)</title><rect x="56" y="532" width="2" height="15" fill="rgb(216,33,25)"/><text x="59.00" y="542.50"></text></g><g><title>dumps (zmq/utils/jsonapi.py) (3 samples, 0.12%)</title><rect x="56" y="548" width="2" height="15" fill="rgb(218,15,2)"/><text x="59.00" y="558.50"></text></g><g><title>dumps (simplejson/__init__.py) (3 samples, 0.12%)</title><rect x="56" y="564" width="2" height="15" fill="rgb(215,14,53)"/><text x="59.00" y="574.50"></text></g><g><title>maybe_run (ipyparallel/controller/scheduler.py) (12 samples, 0.48%)</title><rect x="54" y="468" width="6" height="15" fill="rgb(248,164,11)"/><text x="57.00" y="478.50"></text></g><g><title>submit_task (ipyparallel/controller/scheduler.py) (9 samples, 0.36%)</title><rect x="55" y="484" width="5" height="15" fill="rgb(237,7,21)"/><text x="58.00" y="494.50"></text></g><g><title>_run_callback (zmq/eventloop/zmqstream.py) (66 samples, 2.63%)</title><rect x="29" y="404" width="31" height="15" fill="rgb(250,173,45)"/><text x="32.00" y="414.50">_r..</text></g><g><title>dispatch_submission (decorator.py:decorator-gen-152&gt;) (26 samples, 1.03%)</title><rect x="48" y="420" width="12" height="15" fill="rgb(233,31,23)"/><text x="51.00" y="430.50"></text></g><g><title>log_errors (ipyparallel/util.py) (26 samples, 1.03%)</title><rect x="48" y="436" width="12" height="15" fill="rgb(222,205,12)"/><text x="51.00" y="446.50"></text></g><g><title>dispatch_submission (ipyparallel/controller/scheduler.py) (26 samples, 1.03%)</title><rect x="48" y="452" width="12" height="15" fill="rgb(250,63,52)"/><text x="51.00" y="462.50"></text></g><g><title>_handle_recv (zmq/eventloop/zmqstream.py) (70 samples, 2.78%)</title><rect x="29" y="388" width="33" height="15" fill="rgb(229,140,5)"/><text x="32.00" y="398.50">_h..</text></g><g><title>recv_multipart (zmq/sugar/socket.py) (4 samples, 0.16%)</title><rect x="60" y="404" width="2" height="15" fill="rgb(230,18,37)"/><text x="63.00" y="414.50"></text></g><g><title>_handle_events (tornado/platform/asyncio.py) (73 samples, 2.90%)</title><rect x="29" y="356" width="34" height="15" fill="rgb(237,151,20)"/><text x="32.00" y="366.50">_h..</text></g><g><title>_handle_events (zmq/eventloop/zmqstream.py) (73 samples, 2.90%)</title><rect x="29" y="372" width="34" height="15" fill="rgb(239,172,31)"/><text x="32.00" y="382.50">_h..</text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (3 samples, 0.12%)</title><rect x="62" y="388" width="1" height="15" fill="rgb(253,148,6)"/><text x="65.00" y="398.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (3 samples, 0.12%)</title><rect x="62" y="404" width="1" height="15" fill="rgb(229,111,33)"/><text x="65.00" y="414.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (3 samples, 0.12%)</title><rect x="62" y="420" width="1" height="15" fill="rgb(228,225,38)"/><text x="65.00" y="430.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (3 samples, 0.12%)</title><rect x="62" y="436" width="1" height="15" fill="rgb(236,188,12)"/><text x="65.00" y="446.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (63 samples, 2.51%)</title><rect x="86" y="404" width="29" height="15" fill="rgb(218,75,43)"/><text x="89.00" y="414.50">__..</text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (54 samples, 2.15%)</title><rect x="90" y="420" width="25" height="15" fill="rgb(219,75,39)"/><text x="93.00" y="430.50">_..</text></g><g><title>__get__ (traitlets/traitlets.py) (7 samples, 0.28%)</title><rect x="124" y="484" width="3" height="15" fill="rgb(209,121,43)"/><text x="127.00" y="494.50"></text></g><g><title>get (traitlets/traitlets.py) (6 samples, 0.24%)</title><rect x="124" y="500" width="3" height="15" fill="rgb(236,104,44)"/><text x="127.00" y="510.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (37 samples, 1.47%)</title><rect x="137" y="500" width="18" height="15" fill="rgb(223,196,2)"/><text x="140.00" y="510.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (35 samples, 1.39%)</title><rect x="138" y="516" width="17" height="15" fill="rgb(209,3,2)"/><text x="141.00" y="526.50"></text></g><g><title>loads (simplejson/__init__.py) (30 samples, 1.19%)</title><rect x="140" y="532" width="15" height="15" fill="rgb(246,154,19)"/><text x="143.00" y="542.50"></text></g><g><title>decode (simplejson/decoder.py) (26 samples, 1.03%)</title><rect x="142" y="548" width="13" height="15" fill="rgb(215,158,18)"/><text x="145.00" y="558.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (22 samples, 0.88%)</title><rect x="144" y="564" width="11" height="15" fill="rgb(231,107,12)"/><text x="147.00" y="574.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="155" y="500" width="1" height="15" fill="rgb(236,159,37)"/><text x="158.00" y="510.50"></text></g><g><title>adapt (jupyter_client/adapter.py) (4 samples, 0.16%)</title><rect x="156" y="500" width="2" height="15" fill="rgb(246,43,49)"/><text x="159.00" y="510.50"></text></g><g><title>__len__ (dateutil/parser/_parser.py) (5 samples, 0.20%)</title><rect x="344" y="580" width="3" height="15" fill="rgb(236,62,35)"/><text x="347.00" y="590.50"></text></g><g><title>&lt;genexpr&gt; (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="345" y="596" width="2" height="15" fill="rgb(219,190,14)"/><text x="348.00" y="606.50"></text></g><g><title>_build_naive (dateutil/parser/_parser.py) (13 samples, 0.52%)</title><rect x="347" y="580" width="6" height="15" fill="rgb(205,48,29)"/><text x="350.00" y="590.50"></text></g><g><title>_build_tzaware (dateutil/parser/_parser.py) (11 samples, 0.44%)</title><rect x="353" y="580" width="5" height="15" fill="rgb(253,28,8)"/><text x="356.00" y="590.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (14 samples, 0.56%)</title><rect x="372" y="596" width="7" height="15" fill="rgb(218,228,23)"/><text x="375.00" y="606.50"></text></g><g><title>_could_be_tzname (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="379" y="596" width="1" height="15" fill="rgb(219,4,6)"/><text x="382.00" y="606.50"></text></g><g><title>_find_hms_idx (dateutil/parser/_parser.py) (8 samples, 0.32%)</title><rect x="390" y="612" width="3" height="15" fill="rgb(241,175,3)"/><text x="393.00" y="622.50"></text></g><g><title>hms (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="392" y="628" width="1" height="15" fill="rgb(209,106,10)"/><text x="395.00" y="638.50"></text></g><g><title>_parse_min_sec (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="393" y="612" width="2" height="15" fill="rgb(246,76,23)"/><text x="396.00" y="622.50"></text></g><g><title>_parsems (dateutil/parser/_parser.py) (8 samples, 0.32%)</title><rect x="395" y="612" width="4" height="15" fill="rgb(247,161,46)"/><text x="398.00" y="622.50"></text></g><g><title>append (dateutil/parser/_parser.py) (7 samples, 0.28%)</title><rect x="400" y="612" width="3" height="15" fill="rgb(246,64,38)"/><text x="403.00" y="622.50"></text></g><g><title>jump (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="403" y="612" width="1" height="15" fill="rgb(225,146,36)"/><text x="406.00" y="622.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (54 samples, 2.15%)</title><rect x="380" y="596" width="26" height="15" fill="rgb(223,114,32)"/><text x="383.00" y="606.50">_..</text></g><g><title>month (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="404" y="612" width="2" height="15" fill="rgb(227,117,38)"/><text x="407.00" y="622.50"></text></g><g><title>resolve_ymd (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="407" y="596" width="1" height="15" fill="rgb(214,211,16)"/><text x="410.00" y="606.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (7 samples, 0.28%)</title><rect x="412" y="612" width="3" height="15" fill="rgb(211,23,22)"/><text x="415.00" y="622.50"></text></g><g><title>split (dateutil/parser/_parser.py) (79 samples, 3.14%)</title><rect x="408" y="596" width="38" height="15" fill="rgb(207,199,53)"/><text x="411.00" y="606.50">spl..</text></g><g><title>__next__ (dateutil/parser/_parser.py) (65 samples, 2.59%)</title><rect x="415" y="612" width="31" height="15" fill="rgb(226,199,8)"/><text x="418.00" y="622.50">__..</text></g><g><title>get_token (dateutil/parser/_parser.py) (61 samples, 2.43%)</title><rect x="417" y="628" width="29" height="15" fill="rgb(231,48,29)"/><text x="420.00" y="638.50">ge..</text></g><g><title>tzoffset (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="446" y="596" width="1" height="15" fill="rgb(245,203,18)"/><text x="449.00" y="606.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (621 samples, 24.70%)</title><rect x="158" y="500" width="292" height="15" fill="rgb(253,87,16)"/><text x="161.00" y="510.50">extract_dates (jupyter_client/jsonutil...</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (616 samples, 24.50%)</title><rect x="161" y="516" width="289" height="15" fill="rgb(245,119,38)"/><text x="164.00" y="526.50">extract_dates (jupyter_client/jsonutil..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (599 samples, 23.83%)</title><rect x="169" y="532" width="281" height="15" fill="rgb(220,87,46)"/><text x="172.00" y="542.50">parse_date (jupyter_client/jsonutil.p..</text></g><g><title>parse (dateutil/parser/_parser.py) (583 samples, 23.19%)</title><rect x="176" y="548" width="274" height="15" fill="rgb(213,126,7)"/><text x="179.00" y="558.50">parse (dateutil/parser/_parser.py)</text></g><g><title>parse (dateutil/parser/_parser.py) (579 samples, 23.03%)</title><rect x="178" y="564" width="272" height="15" fill="rgb(206,34,20)"/><text x="181.00" y="574.50">parse (dateutil/parser/_parser.py)</text></g><g><title>_parse (dateutil/parser/_parser.py) (196 samples, 7.80%)</title><rect x="358" y="580" width="92" height="15" fill="rgb(227,88,37)"/><text x="361.00" y="590.50">_parse (da..</text></g><g><title>weekday (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="448" y="596" width="2" height="15" fill="rgb(227,59,49)"/><text x="451.00" y="606.50"></text></g><g><title>copy (hmac.py) (6 samples, 0.24%)</title><rect x="452" y="516" width="3" height="15" fill="rgb(226,102,22)"/><text x="455.00" y="526.50"></text></g><g><title>hexdigest (hmac.py) (4 samples, 0.16%)</title><rect x="455" y="516" width="2" height="15" fill="rgb(234,210,47)"/><text x="458.00" y="526.50"></text></g><g><title>_current (hmac.py) (3 samples, 0.12%)</title><rect x="456" y="532" width="1" height="15" fill="rgb(212,24,0)"/><text x="459.00" y="542.50"></text></g><g><title>deserialize (jupyter_client/session.py) (716 samples, 28.48%)</title><rect x="127" y="484" width="336" height="15" fill="rgb(235,52,32)"/><text x="130.00" y="494.50">deserialize (jupyter_client/session.py)</text></g><g><title>sign (jupyter_client/session.py) (28 samples, 1.11%)</title><rect x="450" y="500" width="13" height="15" fill="rgb(222,112,35)"/><text x="453.00" y="510.50"></text></g><g><title>update (hmac.py) (12 samples, 0.48%)</title><rect x="457" y="516" width="6" height="15" fill="rgb(220,116,10)"/><text x="460.00" y="526.50"></text></g><g><title>feed_identities (jupyter_client/session.py) (11 samples, 0.44%)</title><rect x="463" y="484" width="5" height="15" fill="rgb(213,219,29)"/><text x="466.00" y="494.50"></text></g><g><title>&lt;listcomp&gt; (jupyter_client/session.py) (5 samples, 0.20%)</title><rect x="466" y="500" width="2" height="15" fill="rgb(252,199,31)"/><text x="469.00" y="510.50"></text></g><g><title>finish_job (ipyparallel/controller/scheduler.py) (5 samples, 0.20%)</title><rect x="468" y="484" width="2" height="15" fill="rgb(223,19,3)"/><text x="471.00" y="494.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="469" y="500" width="1" height="15" fill="rgb(236,46,18)"/><text x="472.00" y="510.50"></text></g><g><title>get (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="469" y="516" width="1" height="15" fill="rgb(236,97,24)"/><text x="472.00" y="526.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (4 samples, 0.16%)</title><rect x="479" y="500" width="2" height="15" fill="rgb(206,206,28)"/><text x="482.00" y="510.50"></text></g><g><title>get (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="480" y="516" width="1" height="15" fill="rgb(225,156,41)"/><text x="483.00" y="526.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (12 samples, 0.48%)</title><rect x="485" y="548" width="6" height="15" fill="rgb(221,78,39)"/><text x="488.00" y="558.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (10 samples, 0.40%)</title><rect x="486" y="564" width="5" height="15" fill="rgb(233,6,14)"/><text x="489.00" y="574.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (7 samples, 0.28%)</title><rect x="492" y="580" width="3" height="15" fill="rgb(225,215,0)"/><text x="495.00" y="590.50"></text></g><g><title>__init__ (asyncio/events.py) (6 samples, 0.24%)</title><rect x="492" y="596" width="3" height="15" fill="rgb(249,154,52)"/><text x="495.00" y="606.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (26 samples, 1.03%)</title><rect x="483" y="516" width="12" height="15" fill="rgb(237,71,48)"/><text x="486.00" y="526.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (26 samples, 1.03%)</title><rect x="483" y="532" width="12" height="15" fill="rgb(247,6,8)"/><text x="486.00" y="542.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (9 samples, 0.36%)</title><rect x="491" y="548" width="4" height="15" fill="rgb(249,74,42)"/><text x="494.00" y="558.50"></text></g><g><title>call_soon (asyncio/base_events.py) (9 samples, 0.36%)</title><rect x="491" y="564" width="4" height="15" fill="rgb(223,227,10)"/><text x="494.00" y="574.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (37 samples, 1.47%)</title><rect x="481" y="500" width="18" height="15" fill="rgb(217,69,47)"/><text x="484.00" y="510.50"></text></g><g><title>put (queue.py) (7 samples, 0.28%)</title><rect x="495" y="516" width="4" height="15" fill="rgb(217,144,7)"/><text x="498.00" y="526.50"></text></g><g><title>&lt;listcomp&gt; (ipyparallel/controller/scheduler.py) (11 samples, 0.44%)</title><rect x="501" y="516" width="6" height="15" fill="rgb(217,190,42)"/><text x="504.00" y="526.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (5 samples, 0.20%)</title><rect x="504" y="532" width="3" height="15" fill="rgb(224,18,33)"/><text x="507.00" y="542.50"></text></g><g><title>handle_result (ipyparallel/controller/scheduler.py) (78 samples, 3.10%)</title><rect x="470" y="484" width="37" height="15" fill="rgb(209,138,36)"/><text x="473.00" y="494.50">han..</text></g><g><title>update_graph (ipyparallel/controller/scheduler.py) (18 samples, 0.72%)</title><rect x="499" y="500" width="8" height="15" fill="rgb(248,167,1)"/><text x="502.00" y="510.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (5 samples, 0.20%)</title><rect x="509" y="532" width="2" height="15" fill="rgb(250,131,22)"/><text x="512.00" y="542.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (4 samples, 0.16%)</title><rect x="509" y="548" width="2" height="15" fill="rgb(241,135,36)"/><text x="512.00" y="558.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (10 samples, 0.40%)</title><rect x="508" y="500" width="5" height="15" fill="rgb(242,73,38)"/><text x="511.00" y="510.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (10 samples, 0.40%)</title><rect x="508" y="516" width="5" height="15" fill="rgb(206,14,40)"/><text x="511.00" y="526.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (3 samples, 0.12%)</title><rect x="511" y="532" width="2" height="15" fill="rgb(227,106,48)"/><text x="514.00" y="542.50"></text></g><g><title>dispatch_result (decorator.py:decorator-gen-153&gt;) (852 samples, 33.89%)</title><rect x="117" y="436" width="399" height="15" fill="rgb(228,142,3)"/><text x="120.00" y="446.50">dispatch_result (decorator.py:decorator-gen-153&gt;)</text></g><g><title>log_errors (ipyparallel/util.py) (851 samples, 33.85%)</title><rect x="117" y="452" width="399" height="15" fill="rgb(254,205,34)"/><text x="120.00" y="462.50">log_errors (ipyparallel/util.py)</text></g><g><title>dispatch_result (ipyparallel/controller/scheduler.py) (848 samples, 33.73%)</title><rect x="118" y="468" width="398" height="15" fill="rgb(237,109,11)"/><text x="121.00" y="478.50">dispatch_result (ipyparallel/controller/scheduler.py)</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (20 samples, 0.80%)</title><rect x="507" y="484" width="9" height="15" fill="rgb(220,188,5)"/><text x="510.00" y="494.50"></text></g><g><title>put (queue.py) (7 samples, 0.28%)</title><rect x="513" y="500" width="3" height="15" fill="rgb(240,111,8)"/><text x="516.00" y="510.50"></text></g><g><title>__init__ (ipyparallel/controller/scheduler.py) (5 samples, 0.20%)</title><rect x="537" y="484" width="2" height="15" fill="rgb(228,101,36)"/><text x="540.00" y="494.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (23 samples, 0.91%)</title><rect x="545" y="500" width="10" height="15" fill="rgb(222,197,2)"/><text x="548.00" y="510.50"></text></g><g><title>loads (zmq/utils/jsonapi.py) (23 samples, 0.91%)</title><rect x="545" y="516" width="10" height="15" fill="rgb(241,49,5)"/><text x="548.00" y="526.50"></text></g><g><title>loads (simplejson/__init__.py) (21 samples, 0.84%)</title><rect x="546" y="532" width="9" height="15" fill="rgb(252,215,52)"/><text x="549.00" y="542.50"></text></g><g><title>decode (simplejson/decoder.py) (20 samples, 0.80%)</title><rect x="546" y="548" width="9" height="15" fill="rgb(252,116,7)"/><text x="549.00" y="558.50"></text></g><g><title>raw_decode (simplejson/decoder.py) (16 samples, 0.64%)</title><rect x="548" y="564" width="7" height="15" fill="rgb(242,32,4)"/><text x="551.00" y="574.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (9 samples, 0.36%)</title><rect x="556" y="500" width="5" height="15" fill="rgb(234,143,46)"/><text x="559.00" y="510.50"></text></g><g><title>get (traitlets/traitlets.py) (4 samples, 0.16%)</title><rect x="559" y="516" width="2" height="15" fill="rgb(210,27,41)"/><text x="562.00" y="526.50"></text></g><g><title>adapt (jupyter_client/adapter.py) (7 samples, 0.28%)</title><rect x="561" y="500" width="3" height="15" fill="rgb(227,27,17)"/><text x="564.00" y="510.50"></text></g><g><title>__len__ (dateutil/parser/_parser.py) (5 samples, 0.20%)</title><rect x="656" y="580" width="2" height="15" fill="rgb(245,116,2)"/><text x="659.00" y="590.50"></text></g><g><title>_build_naive (dateutil/parser/_parser.py) (11 samples, 0.44%)</title><rect x="658" y="580" width="5" height="15" fill="rgb(227,112,10)"/><text x="661.00" y="590.50"></text></g><g><title>_build_tzaware (dateutil/parser/_parser.py) (5 samples, 0.20%)</title><rect x="663" y="580" width="3" height="15" fill="rgb(223,168,33)"/><text x="666.00" y="590.50"></text></g><g><title>_could_be_tzname (dateutil/parser/_parser.py) (6 samples, 0.24%)</title><rect x="676" y="596" width="2" height="15" fill="rgb(240,118,49)"/><text x="679.00" y="606.50"></text></g><g><title>_find_hms_idx (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="684" y="612" width="2" height="15" fill="rgb(217,88,20)"/><text x="687.00" y="622.50"></text></g><g><title>_parse_min_sec (dateutil/parser/_parser.py) (5 samples, 0.20%)</title><rect x="686" y="612" width="3" height="15" fill="rgb(222,140,18)"/><text x="689.00" y="622.50"></text></g><g><title>_parsems (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="689" y="612" width="1" height="15" fill="rgb(235,178,41)"/><text x="692.00" y="622.50"></text></g><g><title>_to_decimal (dateutil/parser/_parser.py) (5 samples, 0.20%)</title><rect x="690" y="612" width="2" height="15" fill="rgb(234,168,44)"/><text x="693.00" y="622.50"></text></g><g><title>_parse_numeric_token (dateutil/parser/_parser.py) (38 samples, 1.51%)</title><rect x="678" y="596" width="18" height="15" fill="rgb(212,95,0)"/><text x="681.00" y="606.50"></text></g><g><title>append (dateutil/parser/_parser.py) (8 samples, 0.32%)</title><rect x="692" y="612" width="4" height="15" fill="rgb(226,214,5)"/><text x="695.00" y="622.50"></text></g><g><title>resolve_ymd (dateutil/parser/_parser.py) (7 samples, 0.28%)</title><rect x="698" y="596" width="3" height="15" fill="rgb(240,213,6)"/><text x="701.00" y="606.50"></text></g><g><title>__init__ (dateutil/parser/_parser.py) (4 samples, 0.16%)</title><rect x="702" y="612" width="2" height="15" fill="rgb(248,154,45)"/><text x="705.00" y="622.50"></text></g><g><title>isspace (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="722" y="644" width="1" height="15" fill="rgb(212,56,19)"/><text x="725.00" y="654.50"></text></g><g><title>split (dateutil/parser/_parser.py) (49 samples, 1.95%)</title><rect x="701" y="596" width="23" height="15" fill="rgb(254,81,52)"/><text x="704.00" y="606.50">s..</text></g><g><title>__next__ (dateutil/parser/_parser.py) (42 samples, 1.67%)</title><rect x="704" y="612" width="20" height="15" fill="rgb(212,189,38)"/><text x="707.00" y="622.50"></text></g><g><title>get_token (dateutil/parser/_parser.py) (38 samples, 1.51%)</title><rect x="706" y="628" width="18" height="15" fill="rgb(243,84,23)"/><text x="709.00" y="638.50"></text></g><g><title>validate (dateutil/parser/_parser.py) (3 samples, 0.12%)</title><rect x="724" y="596" width="1" height="15" fill="rgb(245,133,37)"/><text x="727.00" y="606.50"></text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (340 samples, 13.52%)</title><rect x="566" y="516" width="160" height="15" fill="rgb(240,28,28)"/><text x="569.00" y="526.50">extract_dates (jupyt..</text></g><g><title>parse_date (jupyter_client/jsonutil.py) (339 samples, 13.48%)</title><rect x="567" y="532" width="159" height="15" fill="rgb(230,152,26)"/><text x="570.00" y="542.50">parse_date (jupyter_..</text></g><g><title>parse (dateutil/parser/_parser.py) (333 samples, 13.25%)</title><rect x="569" y="548" width="157" height="15" fill="rgb(207,201,26)"/><text x="572.00" y="558.50">parse (dateutil/pars..</text></g><g><title>parse (dateutil/parser/_parser.py) (333 samples, 13.25%)</title><rect x="569" y="564" width="157" height="15" fill="rgb(205,140,17)"/><text x="572.00" y="574.50">parse (dateutil/pars..</text></g><g><title>_parse (dateutil/parser/_parser.py) (128 samples, 5.09%)</title><rect x="666" y="580" width="60" height="15" fill="rgb(248,128,4)"/><text x="669.00" y="590.50">_parse..</text></g><g><title>extract_dates (jupyter_client/jsonutil.py) (346 samples, 13.76%)</title><rect x="564" y="500" width="162" height="15" fill="rgb(219,213,43)"/><text x="567.00" y="510.50">extract_dates (jupyt..</text></g><g><title>hexdigest (hmac.py) (4 samples, 0.16%)</title><rect x="729" y="516" width="1" height="15" fill="rgb(229,225,42)"/><text x="732.00" y="526.50"></text></g><g><title>_current (hmac.py) (3 samples, 0.12%)</title><rect x="729" y="532" width="1" height="15" fill="rgb(236,65,26)"/><text x="732.00" y="542.50"></text></g><g><title>deserialize (jupyter_client/session.py) (410 samples, 16.31%)</title><rect x="539" y="484" width="193" height="15" fill="rgb(213,70,44)"/><text x="542.00" y="494.50">deserialize (jupyter_clie..</text></g><g><title>sign (jupyter_client/session.py) (12 samples, 0.48%)</title><rect x="726" y="500" width="6" height="15" fill="rgb(250,154,26)"/><text x="729.00" y="510.50"></text></g><g><title>update (hmac.py) (3 samples, 0.12%)</title><rect x="730" y="516" width="2" height="15" fill="rgb(217,44,34)"/><text x="733.00" y="526.50"></text></g><g><title>feed_identities (jupyter_client/session.py) (4 samples, 0.16%)</title><rect x="732" y="484" width="2" height="15" fill="rgb(232,40,29)"/><text x="735.00" y="494.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (9 samples, 0.36%)</title><rect x="737" y="516" width="4" height="15" fill="rgb(224,112,0)"/><text x="740.00" y="526.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (5 samples, 0.20%)</title><rect x="739" y="532" width="2" height="15" fill="rgb(250,216,9)"/><text x="742.00" y="542.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (5 samples, 0.20%)</title><rect x="739" y="548" width="2" height="15" fill="rgb(242,193,37)"/><text x="742.00" y="558.50"></text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (13 samples, 0.52%)</title><rect x="736" y="500" width="6" height="15" fill="rgb(212,174,29)"/><text x="739.00" y="510.50"></text></g><g><title>flush (zmq/eventloop/zmqstream.py) (25 samples, 0.99%)</title><rect x="734" y="484" width="11" height="15" fill="rgb(236,162,52)"/><text x="737.00" y="494.50"></text></g><g><title>update_flag (zmq/eventloop/zmqstream.py) (6 samples, 0.24%)</title><rect x="743" y="500" width="2" height="15" fill="rgb(238,59,17)"/><text x="746.00" y="510.50"></text></g><g><title>sending (zmq/eventloop/zmqstream.py) (6 samples, 0.24%)</title><rect x="743" y="516" width="2" height="15" fill="rgb(213,118,49)"/><text x="746.00" y="526.50"></text></g><g><title>empty (queue.py) (5 samples, 0.20%)</title><rect x="743" y="532" width="2" height="15" fill="rgb(214,224,49)"/><text x="746.00" y="542.50"></text></g><g><title>available_engines (ipyparallel/controller/scheduler.py) (27 samples, 1.07%)</title><rect x="749" y="500" width="12" height="15" fill="rgb(245,22,39)"/><text x="752.00" y="510.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (13 samples, 0.52%)</title><rect x="755" y="516" width="6" height="15" fill="rgb(205,191,14)"/><text x="758.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (7 samples, 0.28%)</title><rect x="758" y="532" width="3" height="15" fill="rgb(208,144,8)"/><text x="761.00" y="542.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (22 samples, 0.88%)</title><rect x="767" y="516" width="10" height="15" fill="rgb(252,172,33)"/><text x="770.00" y="526.50"></text></g><g><title>get (traitlets/traitlets.py) (16 samples, 0.64%)</title><rect x="770" y="532" width="7" height="15" fill="rgb(212,30,34)"/><text x="773.00" y="542.50"></text></g><g><title>can_run (ipyparallel/controller/scheduler.py) (35 samples, 1.39%)</title><rect x="761" y="500" width="17" height="15" fill="rgb(247,197,44)"/><text x="764.00" y="510.50"></text></g><g><title>&lt;listcomp&gt; (ipyparallel/controller/scheduler.py) (4 samples, 0.16%)</title><rect x="782" y="516" width="2" height="15" fill="rgb(250,8,37)"/><text x="785.00" y="526.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="783" y="532" width="1" height="15" fill="rgb(218,200,26)"/><text x="786.00" y="542.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (4 samples, 0.16%)</title><rect x="784" y="516" width="2" height="15" fill="rgb(236,146,40)"/><text x="787.00" y="526.50"></text></g><g><title>add_job (ipyparallel/controller/scheduler.py) (6 samples, 0.24%)</title><rect x="786" y="516" width="3" height="15" fill="rgb(205,60,36)"/><text x="789.00" y="526.50"></text></g><g><title>msg_header (jupyter_client/session.py) (6 samples, 0.24%)</title><rect x="799" y="564" width="3" height="15" fill="rgb(230,107,34)"/><text x="802.00" y="574.50"></text></g><g><title>utcnow (jupyter_client/session.py) (3 samples, 0.12%)</title><rect x="801" y="580" width="1" height="15" fill="rgb(244,184,4)"/><text x="804.00" y="590.50"></text></g><g><title>msg (jupyter_client/session.py) (33 samples, 1.31%)</title><rect x="796" y="532" width="16" height="15" fill="rgb(206,205,18)"/><text x="799.00" y="542.50"></text></g><g><title>msg_header (jupyter_client/session.py) (31 samples, 1.23%)</title><rect x="797" y="548" width="15" height="15" fill="rgb(224,94,27)"/><text x="800.00" y="558.50"></text></g><g><title>msg_id (jupyter_client/session.py) (20 samples, 0.80%)</title><rect x="802" y="564" width="10" height="15" fill="rgb(247,104,31)"/><text x="805.00" y="574.50"></text></g><g><title>new_id (jupyter_client/session.py) (19 samples, 0.76%)</title><rect x="803" y="580" width="9" height="15" fill="rgb(211,101,39)"/><text x="806.00" y="590.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (5 samples, 0.20%)</title><rect x="815" y="580" width="3" height="15" fill="rgb(241,160,31)"/><text x="818.00" y="590.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (4 samples, 0.16%)</title><rect x="816" y="596" width="2" height="15" fill="rgb(245,139,23)"/><text x="819.00" y="606.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (16 samples, 0.64%)</title><rect x="813" y="548" width="8" height="15" fill="rgb(243,59,23)"/><text x="816.00" y="558.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (15 samples, 0.60%)</title><rect x="814" y="564" width="7" height="15" fill="rgb(244,217,21)"/><text x="817.00" y="574.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (6 samples, 0.24%)</title><rect x="818" y="580" width="3" height="15" fill="rgb(235,6,31)"/><text x="821.00" y="590.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (22 samples, 0.88%)</title><rect x="812" y="532" width="10" height="15" fill="rgb(218,101,2)"/><text x="815.00" y="542.50"></text></g><g><title>__init__ (simplejson/encoder.py) (7 samples, 0.28%)</title><rect x="833" y="596" width="3" height="15" fill="rgb(213,110,52)"/><text x="836.00" y="606.50"></text></g><g><title>date_default (jupyter_client/jsonutil.py) (8 samples, 0.32%)</title><rect x="856" y="628" width="4" height="15" fill="rgb(210,135,8)"/><text x="859.00" y="638.50"></text></g><g><title>&lt;lambda&gt; (jupyter_client/session.py) (90 samples, 3.58%)</title><rect x="824" y="548" width="42" height="15" fill="rgb(228,194,25)"/><text x="827.00" y="558.50">&lt;la..</text></g><g><title>dumps (zmq/utils/jsonapi.py) (87 samples, 3.46%)</title><rect x="825" y="564" width="41" height="15" fill="rgb(234,123,6)"/><text x="828.00" y="574.50">dum..</text></g><g><title>dumps (simplejson/__init__.py) (84 samples, 3.34%)</title><rect x="827" y="580" width="39" height="15" fill="rgb(232,14,7)"/><text x="830.00" y="590.50">dum..</text></g><g><title>encode (simplejson/encoder.py) (64 samples, 2.55%)</title><rect x="836" y="596" width="30" height="15" fill="rgb(244,176,38)"/><text x="839.00" y="606.50">en..</text></g><g><title>iterencode (simplejson/encoder.py) (57 samples, 2.27%)</title><rect x="839" y="612" width="27" height="15" fill="rgb(241,102,24)"/><text x="842.00" y="622.50">i..</text></g><g><title>encode_basestring (simplejson/encoder.py) (13 samples, 0.52%)</title><rect x="860" y="628" width="6" height="15" fill="rgb(211,75,6)"/><text x="863.00" y="638.50"></text></g><g><title>__get__ (traitlets/traitlets.py) (3 samples, 0.12%)</title><rect x="866" y="548" width="2" height="15" fill="rgb(242,16,32)"/><text x="869.00" y="558.50"></text></g><g><title>copy (hmac.py) (5 samples, 0.20%)</title><rect x="869" y="564" width="3" height="15" fill="rgb(220,119,10)"/><text x="872.00" y="574.50"></text></g><g><title>hexdigest (hmac.py) (5 samples, 0.20%)</title><rect x="872" y="564" width="3" height="15" fill="rgb(220,13,9)"/><text x="875.00" y="574.50"></text></g><g><title>send (jupyter_client/session.py) (185 samples, 7.36%)</title><rect x="789" y="516" width="86" height="15" fill="rgb(231,18,47)"/><text x="792.00" y="526.50">send (jupy..</text></g><g><title>serialize (jupyter_client/session.py) (114 samples, 4.53%)</title><rect x="822" y="532" width="53" height="15" fill="rgb(247,50,14)"/><text x="825.00" y="542.50">seria..</text></g><g><title>sign (jupyter_client/session.py) (17 samples, 0.68%)</title><rect x="868" y="548" width="7" height="15" fill="rgb(208,155,14)"/><text x="871.00" y="558.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (8 samples, 0.32%)</title><rect x="879" y="580" width="4" height="15" fill="rgb(211,151,26)"/><text x="882.00" y="590.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (7 samples, 0.28%)</title><rect x="879" y="596" width="4" height="15" fill="rgb(236,154,35)"/><text x="882.00" y="606.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (8 samples, 0.32%)</title><rect x="884" y="612" width="4" height="15" fill="rgb(254,36,0)"/><text x="887.00" y="622.50"></text></g><g><title>__init__ (asyncio/events.py) (5 samples, 0.20%)</title><rect x="885" y="628" width="3" height="15" fill="rgb(243,13,36)"/><text x="888.00" y="638.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (24 samples, 0.95%)</title><rect x="877" y="548" width="11" height="15" fill="rgb(217,131,24)"/><text x="880.00" y="558.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (22 samples, 0.88%)</title><rect x="878" y="564" width="10" height="15" fill="rgb(233,150,23)"/><text x="881.00" y="574.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (12 samples, 0.48%)</title><rect x="883" y="580" width="5" height="15" fill="rgb(253,141,25)"/><text x="886.00" y="590.50"></text></g><g><title>call_soon (asyncio/base_events.py) (9 samples, 0.36%)</title><rect x="884" y="596" width="4" height="15" fill="rgb(207,176,24)"/><text x="887.00" y="606.50"></text></g><g><title>send (zmq/eventloop/zmqstream.py) (33 samples, 1.31%)</title><rect x="875" y="516" width="16" height="15" fill="rgb(215,51,23)"/><text x="878.00" y="526.50"></text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (32 samples, 1.27%)</title><rect x="876" y="532" width="15" height="15" fill="rgb(253,211,33)"/><text x="879.00" y="542.50"></text></g><g><title>put (queue.py) (5 samples, 0.20%)</title><rect x="889" y="548" width="2" height="15" fill="rgb(209,80,52)"/><text x="892.00" y="558.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (9 samples, 0.36%)</title><rect x="893" y="564" width="5" height="15" fill="rgb(240,118,4)"/><text x="896.00" y="574.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (6 samples, 0.24%)</title><rect x="895" y="580" width="3" height="15" fill="rgb(225,106,14)"/><text x="898.00" y="590.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (22 samples, 0.88%)</title><rect x="892" y="532" width="11" height="15" fill="rgb(217,183,48)"/><text x="895.00" y="542.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (21 samples, 0.84%)</title><rect x="893" y="548" width="10" height="15" fill="rgb(230,161,3)"/><text x="896.00" y="558.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (11 samples, 0.44%)</title><rect x="898" y="564" width="5" height="15" fill="rgb(240,115,23)"/><text x="901.00" y="574.50"></text></g><g><title>call_soon (asyncio/base_events.py) (11 samples, 0.44%)</title><rect x="898" y="580" width="5" height="15" fill="rgb(213,16,8)"/><text x="901.00" y="590.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (9 samples, 0.36%)</title><rect x="898" y="596" width="5" height="15" fill="rgb(243,220,29)"/><text x="901.00" y="606.50"></text></g><g><title>__init__ (asyncio/events.py) (4 samples, 0.16%)</title><rect x="901" y="612" width="2" height="15" fill="rgb(248,182,4)"/><text x="904.00" y="622.50"></text></g><g><title>maybe_run (ipyparallel/controller/scheduler.py) (343 samples, 13.64%)</title><rect x="745" y="484" width="161" height="15" fill="rgb(217,192,24)"/><text x="748.00" y="494.50">maybe_run (ipyparall..</text></g><g><title>submit_task (ipyparallel/controller/scheduler.py) (272 samples, 10.82%)</title><rect x="779" y="500" width="127" height="15" fill="rgb(209,0,14)"/><text x="782.00" y="510.50">submit_task (ip..</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (33 samples, 1.31%)</title><rect x="891" y="516" width="15" height="15" fill="rgb(252,123,49)"/><text x="894.00" y="526.50"></text></g><g><title>put (queue.py) (7 samples, 0.28%)</title><rect x="903" y="532" width="3" height="15" fill="rgb(217,143,39)"/><text x="906.00" y="542.50"></text></g><g><title>notify (threading.py) (3 samples, 0.12%)</title><rect x="905" y="548" width="1" height="15" fill="rgb(230,16,45)"/><text x="908.00" y="558.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (6 samples, 0.24%)</title><rect x="909" y="532" width="3" height="15" fill="rgb(233,71,13)"/><text x="912.00" y="542.50"></text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (5 samples, 0.20%)</title><rect x="910" y="548" width="2" height="15" fill="rgb(254,16,5)"/><text x="913.00" y="558.50"></text></g><g><title>_add_io_state (zmq/eventloop/zmqstream.py) (18 samples, 0.72%)</title><rect x="907" y="500" width="9" height="15" fill="rgb(213,212,46)"/><text x="910.00" y="510.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (18 samples, 0.72%)</title><rect x="907" y="516" width="9" height="15" fill="rgb(254,30,45)"/><text x="910.00" y="526.50"></text></g><g><title>add_callback (tornado/platform/asyncio.py) (8 samples, 0.32%)</title><rect x="912" y="532" width="4" height="15" fill="rgb(219,61,12)"/><text x="915.00" y="542.50"></text></g><g><title>call_soon (asyncio/base_events.py) (4 samples, 0.16%)</title><rect x="914" y="548" width="2" height="15" fill="rgb(211,70,6)"/><text x="917.00" y="558.50"></text></g><g><title>_call_soon (asyncio/base_events.py) (4 samples, 0.16%)</title><rect x="914" y="564" width="2" height="15" fill="rgb(249,92,31)"/><text x="917.00" y="574.50"></text></g><g><title>_run_callback (zmq/eventloop/zmqstream.py) (1,714 samples, 68.18%)</title><rect x="117" y="420" width="804" height="15" fill="rgb(207,10,16)"/><text x="120.00" y="430.50">_run_callback (zmq/eventloop/zmqstream.py)</text></g><g><title>dispatch_submission (decorator.py:decorator-gen-152&gt;) (862 samples, 34.29%)</title><rect x="516" y="436" width="405" height="15" fill="rgb(227,210,54)"/><text x="519.00" y="446.50">dispatch_submission (decorator.py:decorator-gen-152&gt;)</text></g><g><title>log_errors (ipyparallel/util.py) (860 samples, 34.21%)</title><rect x="517" y="452" width="404" height="15" fill="rgb(249,28,29)"/><text x="520.00" y="462.50">log_errors (ipyparallel/util.py)</text></g><g><title>dispatch_submission (ipyparallel/controller/scheduler.py) (857 samples, 34.09%)</title><rect x="519" y="468" width="402" height="15" fill="rgb(210,204,24)"/><text x="522.00" y="478.50">dispatch_submission (ipyparallel/controller/scheduler...</text></g><g><title>send_multipart (zmq/eventloop/zmqstream.py) (31 samples, 1.23%)</title><rect x="906" y="484" width="15" height="15" fill="rgb(236,228,20)"/><text x="909.00" y="494.50"></text></g><g><title>put (queue.py) (9 samples, 0.36%)</title><rect x="917" y="500" width="4" height="15" fill="rgb(247,113,24)"/><text x="920.00" y="510.50"></text></g><g><title>notify (threading.py) (3 samples, 0.12%)</title><rect x="920" y="516" width="1" height="15" fill="rgb(242,56,15)"/><text x="923.00" y="526.50"></text></g><g><title>_handle_recv (zmq/eventloop/zmqstream.py) (1,800 samples, 71.60%)</title><rect x="115" y="404" width="845" height="15" fill="rgb(252,195,3)"/><text x="118.00" y="414.50">_handle_recv (zmq/eventloop/zmqstream.py)</text></g><g><title>recv_multipart (zmq/sugar/socket.py) (83 samples, 3.30%)</title><rect x="921" y="420" width="39" height="15" fill="rgb(236,153,7)"/><text x="924.00" y="430.50">rec..</text></g><g><title>__exit__ (threading.py) (3 samples, 0.12%)</title><rect x="980" y="436" width="1" height="15" fill="rgb(217,126,40)"/><text x="983.00" y="446.50"></text></g><g><title>get (queue.py) (28 samples, 1.11%)</title><rect x="973" y="420" width="13" height="15" fill="rgb(219,96,14)"/><text x="976.00" y="430.50"></text></g><g><title>notify (threading.py) (8 samples, 0.32%)</title><rect x="982" y="436" width="4" height="15" fill="rgb(211,1,9)"/><text x="985.00" y="446.50"></text></g><g><title>_is_owned (threading.py) (3 samples, 0.12%)</title><rect x="984" y="452" width="2" height="15" fill="rgb(238,159,40)"/><text x="987.00" y="462.50"></text></g><g><title>send_multipart (zmq/sugar/socket.py) (222 samples, 8.83%)</title><rect x="986" y="420" width="104" height="15" fill="rgb(211,88,21)"/><text x="989.00" y="430.50">send_multipa..</text></g><g><title>send (zmq/sugar/socket.py) (176 samples, 7.00%)</title><rect x="1007" y="436" width="83" height="15" fill="rgb(223,105,25)"/><text x="1010.00" y="446.50">send (zmq..</text></g><g><title>_handle_send (zmq/eventloop/zmqstream.py) (285 samples, 11.34%)</title><rect x="960" y="404" width="134" height="15" fill="rgb(222,93,52)"/><text x="963.00" y="414.50">_handle_send (zm..</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (8 samples, 0.32%)</title><rect x="1090" y="420" width="4" height="15" fill="rgb(253,101,35)"/><text x="1093.00" y="430.50"></text></g><g><title>empty (queue.py) (7 samples, 0.28%)</title><rect x="1090" y="436" width="4" height="15" fill="rgb(221,91,41)"/><text x="1093.00" y="446.50"></text></g><g><title>__getattr__ (zmq/sugar/attrsettr.py) (86 samples, 3.42%)</title><rect x="1113" y="436" width="41" height="15" fill="rgb(221,19,49)"/><text x="1116.00" y="446.50">__g..</text></g><g><title>_get_attr_opt (zmq/sugar/attrsettr.py) (73 samples, 2.90%)</title><rect x="1120" y="452" width="34" height="15" fill="rgb(247,55,2)"/><text x="1123.00" y="462.50">_g..</text></g><g><title>_call_soon (asyncio/base_events.py) (17 samples, 0.68%)</title><rect x="1161" y="468" width="8" height="15" fill="rgb(217,206,31)"/><text x="1164.00" y="478.50"></text></g><g><title>__init__ (asyncio/events.py) (9 samples, 0.36%)</title><rect x="1165" y="484" width="4" height="15" fill="rgb(238,52,50)"/><text x="1168.00" y="494.50"></text></g><g><title>_update_handler (zmq/eventloop/zmqstream.py) (145 samples, 5.77%)</title><rect x="1102" y="420" width="68" height="15" fill="rgb(206,40,31)"/><text x="1105.00" y="430.50">_update..</text></g><g><title>add_callback (tornado/platform/asyncio.py) (35 samples, 1.39%)</title><rect x="1154" y="436" width="16" height="15" fill="rgb(233,122,41)"/><text x="1157.00" y="446.50"></text></g><g><title>call_soon (asyncio/base_events.py) (21 samples, 0.84%)</title><rect x="1160" y="452" width="10" height="15" fill="rgb(216,72,2)"/><text x="1163.00" y="462.50"></text></g><g><title>_rebuild_io_state (zmq/eventloop/zmqstream.py) (177 samples, 7.04%)</title><rect x="1094" y="404" width="83" height="15" fill="rgb(242,158,41)"/><text x="1097.00" y="414.50">_rebuild_..</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (13 samples, 0.52%)</title><rect x="1171" y="420" width="6" height="15" fill="rgb(243,194,46)"/><text x="1174.00" y="430.50"></text></g><g><title>empty (queue.py) (10 samples, 0.40%)</title><rect x="1172" y="436" width="5" height="15" fill="rgb(248,20,32)"/><text x="1175.00" y="446.50"></text></g><g><title>_qsize (queue.py) (4 samples, 0.16%)</title><rect x="1175" y="452" width="2" height="15" fill="rgb(236,212,35)"/><text x="1178.00" y="462.50"></text></g><g><title>all (2,514 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(235,0,0)"/><text x="13.00" y="46.50"></text></g><g><title>_run_module_as_main (runpy.py) (2,514 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(245,8,43)"/><text x="13.00" y="62.50">_run_module_as_main (runpy.py)</text></g><g><title>_run_code (runpy.py) (2,514 samples, 100.00%)</title><rect x="10" y="68" width="1180" height="15" fill="rgb(219,11,15)"/><text x="13.00" y="78.50">_run_code (runpy.py)</text></g><g><title>&lt;module&gt; (ipyparallel/controller/__main__.py) (2,514 samples, 100.00%)</title><rect x="10" y="84" width="1180" height="15" fill="rgb(218,218,54)"/><text x="13.00" y="94.50">&lt;module&gt; (ipyparallel/controller/__main__.py)</text></g><g><title>main (ipyparallel/controller/__main__.py) (2,514 samples, 100.00%)</title><rect x="10" y="100" width="1180" height="15" fill="rgb(254,18,37)"/><text x="13.00" y="110.50">main (ipyparallel/controller/__main__.py)</text></g><g><title>launch_new_instance (ipyparallel/apps/ipcontrollerapp.py) (2,514 samples, 100.00%)</title><rect x="10" y="116" width="1180" height="15" fill="rgb(236,68,31)"/><text x="13.00" y="126.50">launch_new_instance (ipyparallel/apps/ipcontrollerapp.py)</text></g><g><title>launch_instance (traitlets/config/application.py) (2,514 samples, 100.00%)</title><rect x="10" y="132" width="1180" height="15" fill="rgb(222,143,14)"/><text x="13.00" y="142.50">launch_instance (traitlets/config/application.py)</text></g><g><title>start (ipyparallel/apps/ipcontrollerapp.py) (2,514 samples, 100.00%)</title><rect x="10" y="148" width="1180" height="15" fill="rgb(254,34,37)"/><text x="13.00" y="158.50">start (ipyparallel/apps/ipcontrollerapp.py)</text></g><g><title>start (multiprocessing/process.py) (2,514 samples, 100.00%)</title><rect x="10" y="164" width="1180" height="15" fill="rgb(231,153,32)"/><text x="13.00" y="174.50">start (multiprocessing/process.py)</text></g><g><title>_Popen (multiprocessing/context.py) (2,514 samples, 100.00%)</title><rect x="10" y="180" width="1180" height="15" fill="rgb(236,121,13)"/><text x="13.00" y="190.50">_Popen (multiprocessing/context.py)</text></g><g><title>_Popen (multiprocessing/context.py) (2,514 samples, 100.00%)</title><rect x="10" y="196" width="1180" height="15" fill="rgb(245,155,38)"/><text x="13.00" y="206.50">_Popen (multiprocessing/context.py)</text></g><g><title>__init__ (multiprocessing/popen_fork.py) (2,514 samples, 100.00%)</title><rect x="10" y="212" width="1180" height="15" fill="rgb(229,132,50)"/><text x="13.00" y="222.50">__init__ (multiprocessing/popen_fork.py)</text></g><g><title>_launch (multiprocessing/popen_fork.py) (2,514 samples, 100.00%)</title><rect x="10" y="228" width="1180" height="15" fill="rgb(213,126,37)"/><text x="13.00" y="238.50">_launch (multiprocessing/popen_fork.py)</text></g><g><title>_bootstrap (multiprocessing/process.py) (2,514 samples, 100.00%)</title><rect x="10" y="244" width="1180" height="15" fill="rgb(214,31,16)"/><text x="13.00" y="254.50">_bootstrap (multiprocessing/process.py)</text></g><g><title>run (multiprocessing/process.py) (2,514 samples, 100.00%)</title><rect x="10" y="260" width="1180" height="15" fill="rgb(228,203,17)"/><text x="13.00" y="270.50">run (multiprocessing/process.py)</text></g><g><title>launch_scheduler (ipyparallel/controller/scheduler.py) (2,514 samples, 100.00%)</title><rect x="10" y="276" width="1180" height="15" fill="rgb(205,201,11)"/><text x="13.00" y="286.50">launch_scheduler (ipyparallel/controller/scheduler.py)</text></g><g><title>start (tornado/platform/asyncio.py) (2,514 samples, 100.00%)</title><rect x="10" y="292" width="1180" height="15" fill="rgb(221,51,23)"/><text x="13.00" y="302.50">start (tornado/platform/asyncio.py)</text></g><g><title>run_forever (asyncio/base_events.py) (2,514 samples, 100.00%)</title><rect x="10" y="308" width="1180" height="15" fill="rgb(219,199,37)"/><text x="13.00" y="318.50">run_forever (asyncio/base_events.py)</text></g><g><title>_run_once (asyncio/base_events.py) (2,514 samples, 100.00%)</title><rect x="10" y="324" width="1180" height="15" fill="rgb(243,26,0)"/><text x="13.00" y="334.50">_run_once (asyncio/base_events.py)</text></g><g><title>_run (asyncio/events.py) (2,493 samples, 99.16%)</title><rect x="19" y="340" width="1171" height="15" fill="rgb(232,174,16)"/><text x="22.00" y="350.50">_run (asyncio/events.py)</text></g><g><title>_run_callback (tornado/ioloop.py) (2,399 samples, 95.43%)</title><rect x="63" y="356" width="1127" height="15" fill="rgb(239,119,38)"/><text x="66.00" y="366.50">_run_callback (tornado/ioloop.py)</text></g><g><title>&lt;lambda&gt; (zmq/eventloop/zmqstream.py) (2,393 samples, 95.19%)</title><rect x="66" y="372" width="1124" height="15" fill="rgb(224,90,44)"/><text x="69.00" y="382.50">&lt;lambda&gt; (zmq/eventloop/zmqstream.py)</text></g><g><title>_handle_events (zmq/eventloop/zmqstream.py) (2,389 samples, 95.03%)</title><rect x="68" y="388" width="1122" height="15" fill="rgb(217,149,46)"/><text x="71.00" y="398.50">_handle_events (zmq/eventloop/zmqstream.py)</text></g><g><title>sending (zmq/eventloop/zmqstream.py) (27 samples, 1.07%)</title><rect x="1177" y="404" width="13" height="15" fill="rgb(242,52,24)"/><text x="1180.00" y="414.50"></text></g><g><title>empty (queue.py) (17 samples, 0.68%)</title><rect x="1182" y="420" width="8" height="15" fill="rgb(222,222,17)"/><text x="1185.00" y="430.50"></text></g></g></svg>