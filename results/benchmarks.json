{
    "throughput.CoalescingBroadcast.time_broadcast": {
        "code": "class Benchmark:\n    def time_broadcast(self, delay, engines, number_of_bytes):\n        self.view = get_view(self)\n        self.view.apply_sync(\n            echo(delay),\n            np.array([0] * number_of_bytes, dtype=np.int8),\n            targets=slice(engines),\n        )\n\nclass ThroughputSuite:\n    def setup(self, *args):\n        self.client = ipp.Client(profile='asv')\n        wait_for(lambda: len(self.client) >= max(engines))",
        "min_run_count": 2,
        "name": "throughput.CoalescingBroadcast.time_broadcast",
        "number": 0,
        "param_names": [
            "delay",
            "Number of engines",
            "Number of bytes"
        ],
        "params": [
            [
                "0"
            ],
            [
                "1",
                "10"
            ],
            [
                "10",
                "100",
                "1000",
                "10000",
                "100000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 300,
        "type": "time",
        "unit": "seconds",
        "version": "1229cbf5251bdcfdb654cdb9ee6b317440b8fbb1e70646546196e2a6dae5998c",
        "warmup_time": -1
    },
    "throughput.DirectViewBroadCast.time_broadcast": {
        "code": "class Benchmark:\n    def time_broadcast(self, delay, engines, number_of_bytes):\n        self.view = get_view(self)\n        self.view.apply_sync(\n            echo(delay),\n            np.array([0] * number_of_bytes, dtype=np.int8),\n            targets=slice(engines),\n        )\n\nclass ThroughputSuite:\n    def setup(self, *args):\n        self.client = ipp.Client(profile='asv')\n        wait_for(lambda: len(self.client) >= max(engines))",
        "min_run_count": 2,
        "name": "throughput.DirectViewBroadCast.time_broadcast",
        "number": 0,
        "param_names": [
            "delay",
            "Number of engines",
            "Number of bytes"
        ],
        "params": [
            [
                "0"
            ],
            [
                "1",
                "10"
            ],
            [
                "10",
                "100",
                "1000",
                "10000",
                "100000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 300,
        "type": "time",
        "unit": "seconds",
        "version": "1229cbf5251bdcfdb654cdb9ee6b317440b8fbb1e70646546196e2a6dae5998c",
        "warmup_time": -1
    },
    "throughput.NonCoalescingBroadcast.time_broadcast": {
        "code": "class Benchmark:\n    def time_broadcast(self, delay, engines, number_of_bytes):\n        self.view = get_view(self)\n        self.view.apply_sync(\n            echo(delay),\n            np.array([0] * number_of_bytes, dtype=np.int8),\n            targets=slice(engines),\n        )\n\nclass ThroughputSuite:\n    def setup(self, *args):\n        self.client = ipp.Client(profile='asv')\n        wait_for(lambda: len(self.client) >= max(engines))",
        "min_run_count": 2,
        "name": "throughput.NonCoalescingBroadcast.time_broadcast",
        "number": 0,
        "param_names": [
            "delay",
            "Number of engines",
            "Number of bytes"
        ],
        "params": [
            [
                "0"
            ],
            [
                "1",
                "10"
            ],
            [
                "10",
                "100",
                "1000",
                "10000",
                "100000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 300,
        "type": "time",
        "unit": "seconds",
        "version": "1229cbf5251bdcfdb654cdb9ee6b317440b8fbb1e70646546196e2a6dae5998c",
        "warmup_time": -1
    },
    "version": 2
}