{
    "overhead_latency.EchoManyArgumentsDirectView.time_echo_with_many_arguments": {
        "code": "class EchoManyArguments:\n    def time_echo_with_many_arguments(self, number_of_arguments):\n        self.view.map(\n            lambda x: echo_many_arguments(*x),\n            [\n                tuple(\n                    np.empty(1, dtype=np.int8) for n in range(number_of_arguments)\n                )\n                for x in range(self.n)\n            ],\n            block=False,\n        )\n\nclass OverHeadLatencyDirectView:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client[: self.n]",
        "min_run_count": 2,
        "name": "overhead_latency.EchoManyArgumentsDirectView.time_echo_with_many_arguments",
        "number": 0,
        "param_names": [
            "Number of arguments"
        ],
        "params": [
            [
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "255"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "5b31dc1f0d0ff160ec2a248b9f5689e53e47715db6c4953af9aaea4c1e340425",
        "warmup_time": -1
    },
    "overhead_latency.EchoManyArgumentsLoadBalanced.time_echo_with_many_arguments": {
        "code": "class EchoManyArguments:\n    def time_echo_with_many_arguments(self, number_of_arguments):\n        self.view.map(\n            lambda x: echo_many_arguments(*x),\n            [\n                tuple(\n                    np.empty(1, dtype=np.int8) for n in range(number_of_arguments)\n                )\n                for x in range(self.n)\n            ],\n            block=False,\n        )\n\nclass OverHeadLatencyLoadBalanced:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client.load_balanced_view(targets=slice(self.n))",
        "min_run_count": 2,
        "name": "overhead_latency.EchoManyArgumentsLoadBalanced.time_echo_with_many_arguments",
        "number": 0,
        "param_names": [
            "Number of arguments"
        ],
        "params": [
            [
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "255"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "7670216cafeed3d0c967c52666b2ff78bdb3a27ca514ce6b4ad1371a315ca8a4",
        "warmup_time": -1
    },
    "overhead_latency.Engines100NoDelayDirectView.time_n_task_non_blocking": {
        "code": "class Engine:\n    def time_n_task_non_blocking(self, tasks, _):\n        self.view.map(echo(0), [None] * tasks, block=False)\n\nclass OverHeadLatencyDirectView:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client[: self.n]",
        "min_run_count": 2,
        "name": "overhead_latency.Engines100NoDelayDirectView.time_n_task_non_blocking",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "0"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "4ea7b3f5eecf7620b8a5a7b85463284684ba20e1266cfc44ba42d711bbd71988",
        "warmup_time": -1
    },
    "overhead_latency.Engines100NoDelayDirectView.time_n_tasks": {
        "code": "class Engine:\n    def time_n_tasks(self, tasks, _):\n        self.view.map_sync(echo(0), [None] * tasks)\n\nclass OverHeadLatencyDirectView:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client[: self.n]",
        "min_run_count": 2,
        "name": "overhead_latency.Engines100NoDelayDirectView.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "0"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "24c122393bc999abda500b2a1c35e22ceec81bd5ecb243619efe4dcc66d79861",
        "warmup_time": -1
    },
    "overhead_latency.Engines100NoDelayLoadBalanced.time_n_task_non_blocking": {
        "code": "class Engine:\n    def time_n_task_non_blocking(self, tasks, _):\n        self.view.map(echo(0), [None] * tasks, block=False)\n\nclass OverHeadLatencyLoadBalanced:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client.load_balanced_view(targets=slice(self.n))",
        "min_run_count": 2,
        "name": "overhead_latency.Engines100NoDelayLoadBalanced.time_n_task_non_blocking",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "0"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "b24b5e456e4b51831608db98e1111f368c089233206594cb20d549a97789cd45",
        "warmup_time": -1
    },
    "overhead_latency.Engines100NoDelayLoadBalanced.time_n_tasks": {
        "code": "class Engine:\n    def time_n_tasks(self, tasks, _):\n        self.view.map_sync(echo(0), [None] * tasks)\n\nclass OverHeadLatencyLoadBalanced:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client.load_balanced_view(targets=slice(self.n))",
        "min_run_count": 2,
        "name": "overhead_latency.Engines100NoDelayLoadBalanced.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "0"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "84ee6660e07ec840261fc2b5afafcf786670de1317a59ea50452483b244bf206",
        "warmup_time": -1
    },
    "overhead_latency.Engines10DirectView.time_n_tasks": {
        "code": "class <locals>:\n    lambda self, tasks, delay: self.view.map_sync(echo(delay), [None] * tasks),\n\nclass OverHeadLatencyDirectView:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client[: self.n]",
        "min_run_count": 2,
        "name": "overhead_latency.Engines10DirectView.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ],
            [
                "0",
                "0.1",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "4581b9e27e52824ab3e7a4ec2fe9917b123e265ea982da6b48ff727c93ebb87f",
        "warmup_time": -1
    },
    "overhead_latency.Engines10LoadBalanced.time_n_tasks": {
        "code": "class <locals>:\n    lambda self, tasks, delay: self.view.map_sync(echo(delay), [None] * tasks),\n\nclass OverHeadLatencyLoadBalanced:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client.load_balanced_view(targets=slice(self.n))",
        "min_run_count": 2,
        "name": "overhead_latency.Engines10LoadBalanced.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ],
            [
                "0",
                "0.1",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "86f21066f985fbdd340f6cfc65e57fa732dcdb30ea11d1d1c04af6ea2286fe85",
        "warmup_time": -1
    },
    "overhead_latency.Engines1DirectView.time_n_tasks": {
        "code": "class <locals>:\n    lambda self, tasks, delay: self.view.map_sync(echo(delay), [None] * tasks),\n\nclass OverHeadLatencyDirectView:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client[: self.n]",
        "min_run_count": 2,
        "name": "overhead_latency.Engines1DirectView.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ],
            [
                "0",
                "0.1",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "4581b9e27e52824ab3e7a4ec2fe9917b123e265ea982da6b48ff727c93ebb87f",
        "warmup_time": -1
    },
    "overhead_latency.Engines1LoadBalanced.time_n_tasks": {
        "code": "class <locals>:\n    lambda self, tasks, delay: self.view.map_sync(echo(delay), [None] * tasks),\n\nclass OverHeadLatencyLoadBalanced:\n    def setup(self, *_):\n        super().setup()\n        self.view = self.client.load_balanced_view(targets=slice(self.n))",
        "min_run_count": 2,
        "name": "overhead_latency.Engines1LoadBalanced.time_n_tasks",
        "number": 0,
        "param_names": [
            "number of tasks",
            "delay for echo"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ],
            [
                "0",
                "0.1",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "86f21066f985fbdd340f6cfc65e57fa732dcdb30ea11d1d1c04af6ea2286fe85",
        "warmup_time": -1
    },
    "throughput.NumpyArrayBroadcast.time_broadcast": {
        "code": "class NumpyArrayBroadcast:\n    def time_broadcast(self, engines, num_bytes):\n        self.client[:engines][\"x\"] = np.array([0] * num_bytes, dtype=np.int8)\n\nclass ThroughputSuite:\n    def setup(self, n=10, *_):\n        self.client = ipp.Client(profile=\"asv\")\n        wait_for(lambda: len(self.client) >= n)",
        "min_run_count": 2,
        "name": "throughput.NumpyArrayBroadcast.time_broadcast",
        "number": 0,
        "param_names": [
            "Number of engines",
            "Number of bytes"
        ],
        "params": [
            [
                "1",
                "10",
                "50",
                "100"
            ],
            [
                "10",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 200,
        "type": "time",
        "unit": "seconds",
        "version": "898d240d2d6de3bdf0fd6636311bd5ce8754b9c4042a39174957e7a910fadefa",
        "warmup_time": -1
    },
    "version": 2
}